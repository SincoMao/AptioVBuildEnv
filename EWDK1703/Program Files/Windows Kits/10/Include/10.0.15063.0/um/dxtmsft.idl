//+------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:         dxtmsft.idl
//
//  Description:
//
//      This is the IDL file for DirectX installable transform coclass,
//  interface, and type definitions.
//-------------------------------------------------------------------------

cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// dxtmsft.h")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// (C) Copyright Microsoft Corporation.  All Rights Reserved.")
cpp_quote("//")
cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF")
cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO")
cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A")
cpp_quote("// PARTICULAR PURPOSE.")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("")

//--- Import base idl
import "oaidl.idl";
import "ocidl.idl";
import "dxtrans.idl";

cpp_quote("#include <dxtmsft3.h>")

//--- Additional includes

//--- Export

//=== Forward References ====================================================
interface IDXTComposite;
interface IDXLUTBuilder;
interface IDXDLUTBuilder;
interface IDXTConvolution;

//--- Chrome Wrapper interfaces
interface ICrBlur;

//=== Constants =============================================================

cpp_quote("//")
cpp_quote("//   DXTransforms Image Transforms Type Library Version Info")
cpp_quote("//")
cpp_quote("#define DXTMSFT_TLB_MAJOR_VER 1")
cpp_quote("#define DXTMSFT_TLB_MINOR_VER 1")

//=== Struct & Enum definitions =============================================

//=== Interface definitions =================================================

//--- IDXLUTBuilder -----------------------------------
typedef enum OPIDDXLUTBUILDER
{
    OPID_DXLUTBUILDER_Gamma,
    OPID_DXLUTBUILDER_Opacity,
    OPID_DXLUTBUILDER_Brightness,
    OPID_DXLUTBUILDER_Contrast,
    OPID_DXLUTBUILDER_ColorBalance,
    OPID_DXLUTBUILDER_Posterize,
    OPID_DXLUTBUILDER_Invert,
    OPID_DXLUTBUILDER_Threshold,
    OPID_DXLUTBUILDER_NUM_OPS
} OPIDDXLUTBUILDER;

typedef enum DXLUTCOLOR
{
    DXLUTCOLOR_RED,
    DXLUTCOLOR_GREEN,
    DXLUTCOLOR_BLUE
} DXLUTCOLOR;

[
    uuid(F4370FC1-CADB-11D0-B52C-00A0C9054373),
    helpstring("IDXLUTBuilder Interface"),
    pointer_default(unique)
]
interface IDXLUTBuilder : IUnknown
{
    HRESULT GetNumBuildSteps([out]ULONG *pulNumSteps );
    HRESULT GetBuildOrder([out, size_is(ulSize)]OPIDDXLUTBUILDER OpOrder[],
                          [in]ULONG ulSize );
    HRESULT SetBuildOrder( [in, size_is(ulNumSteps)] const OPIDDXLUTBUILDER OpOrder[],
                           [in]ULONG ulNumSteps );
    HRESULT SetGamma([in] float newVal);
    HRESULT GetGamma([out] float *pVal);
    HRESULT GetOpacity([out] float *pVal);
    HRESULT SetOpacity([in] float newVal);
    HRESULT GetBrightness([in, out]ULONG *pulCount, [out, size_is(*pulCount)]float Weights[]);
    HRESULT SetBrightness([in]ULONG ulCount, [in, size_is(ulCount)]const float Weights[]);
    HRESULT GetContrast([in, out]ULONG *pulCount, [out, size_is(*pulCount)]float Weights[]);
    HRESULT SetContrast([in]ULONG ulCount, [in, size_is(ulCount)]const float Weights[]);
    HRESULT GetColorBalance( [in]DXLUTCOLOR Color, [in, out]ULONG *pulCount, [out, size_is(*pulCount)]float Weights[] );
    HRESULT SetColorBalance( [in]DXLUTCOLOR Color, [in]ULONG ulCount, [in, size_is(ulCount)]const float Weights[] );
    HRESULT GetLevelsPerChannel([out] ULONG *pVal);
    HRESULT SetLevelsPerChannel([in] ULONG newVal);
    HRESULT GetInvert([out]float *pThreshold);
    HRESULT SetInvert([in]float Threshold);
    HRESULT GetThreshold([out] float *pVal);
    HRESULT SetThreshold([in] float newVal);
};

[
    object,
    uuid(73068231-35EE-11d1-81A1-0000F87557DB),
    dual,
    helpstring("IDXDLUTBuilder Interface"),
    pointer_default(unique)
]
interface IDXDLUTBuilder : IDispatch
{
    [propget, id(1)]
        HRESULT NumBuildSteps( [out, retval]long *pNumSteps );
    [propget, id(2)]
        HRESULT BuildOrder( [out, retval]VARIANT *pOpOrder );
    [propput, id(2)]
        HRESULT BuildOrder( [in]VARIANT *pOpOrder );
    [propget, id(3)]
        HRESULT Gamma([out, retval] float *pVal);
    [propput, id(3)]
        HRESULT Gamma([in] float newVal);
    [propget, id(4)]
        HRESULT Opacity([out, retval] float *pVal);
    [propput, id(4)]
        HRESULT Opacity([in] float newVal);
    [propget, id(5)]
        HRESULT Brightness( [out, retval]VARIANT *pWeights );
    [propput, id(5)]
        HRESULT Brightness([in]VARIANT *pWeights );
    [propget, id(6)]
        HRESULT Contrast( [out, retval]VARIANT *pWeights);
    [propput, id(6)]
        HRESULT Contrast( [in]VARIANT *pWeights);
    [propget, id(7)]
        HRESULT ColorBalance( [in]DXLUTCOLOR Color, [out, retval]VARIANT *pWeights );
    [propput, id(7)]
        HRESULT ColorBalance( [in]DXLUTCOLOR Color, [in]VARIANT *pWeights );
    [propget, id(8)]
        HRESULT LevelsPerChannel([out, retval]long *pVal);
    [propput, id(8)]
        HRESULT LevelsPerChannel([in]long newVal);
    [propget, id(9)]
        HRESULT Invert( [out, retval]float *pThreshold );
    [propput, id(9)]
        HRESULT Invert( [in]float Threshold );
    [propget, id(10)]
        HRESULT Threshold([out, retval]float *pVal);
    [propput, id(10)]
        HRESULT Threshold([in]float newVal);
};

//--- IDXTGradientD --------------------------------------------------------
// This is the dispatch control interface for the gradient transform
//
typedef enum DXGRADIENTTYPE
{
    DXGRADIENT_VERTICAL,
    DXGRADIENT_HORIZONTAL,
    DXGRADIENT_NUM_GRADIENTS
} DXGRADIENTTYPE;

typedef enum DXGRADDISPID
{
    DISPID_GradientType = 1,
    DISPID_StartColor,
    DISPID_EndColor,
    DISPID_GradientWidth,
    DISPID_GradientHeight,
    DISPID_GradientAspect,
    DISPID_StartColorStr,
    DISPID_EndColorStr,
} DXGRADDISPID;

[
    object,
    uuid(623E2881-FC0E-11d1-9A77-0000F8756A10),
    dual,
    helpstring("IDXTGradientD Interface"),
    pointer_default(unique)
]
interface IDXTGradientD : IDispatch
{
    [propput, id(DISPID_GradientType)]
        HRESULT GradientType( [in]DXGRADIENTTYPE eType );
    [propget, id(DISPID_GradientType)]
        HRESULT GradientType( [out, retval]DXGRADIENTTYPE* peType );
    [propput, id(DISPID_StartColor)]
        HRESULT StartColor([in] OLE_COLOR newVal);
    [propget, id(DISPID_StartColor)]
        HRESULT StartColor([out, retval] OLE_COLOR *pVal);
    [propput, id(DISPID_EndColor)] 
        HRESULT EndColor([in] OLE_COLOR newVal);
    [propget, id(DISPID_EndColor)]
        HRESULT EndColor([out, retval] OLE_COLOR *pVal);
    [propput, id(DISPID_GradientWidth)] 
        HRESULT GradientWidth([in] long newVal);
    [propget, id(DISPID_GradientWidth)]
        HRESULT GradientWidth([out, retval] long *pVal);
    [propput, id(DISPID_GradientHeight)] 
        HRESULT GradientHeight([in] long newVal);
    [propget, id(DISPID_GradientHeight)]
        HRESULT GradientHeight([out, retval] long *pVal);
    [propput, id(DISPID_GradientAspect)] 
        HRESULT KeepAspectRatio([in] VARIANT_BOOL newVal);
    [propget, id(DISPID_GradientAspect)]
        HRESULT KeepAspectRatio([out, retval] VARIANT_BOOL *pVal);
    [propput, id(DISPID_StartColorStr)]
        HRESULT StartColorStr([in] BSTR newVal);
    [propget, id(DISPID_StartColorStr)]
        HRESULT StartColorStr([out, retval] BSTR* pVal);
    [propput, id(DISPID_EndColorStr)] 
        HRESULT EndColorStr([in] BSTR newVal);
    [propget, id(DISPID_EndColorStr)]
        HRESULT EndColorStr([out, retval] BSTR* pVal);
};

//--- IDXTConvolution --------------------------------------------------------
typedef enum DXCONVFILTERTYPE
{
    DXCFILTER_SRCCOPY,      // No filtering
    DXCFILTER_BOX7X7,
    DXCFILTER_BLUR3X3,      
    DXCFILTER_SHARPEN,
    DXCFILTER_EMBOSS,
    DXCFILTER_ENGRAVE,
    DXCFILTER_NUM_FILTERS,  // This must be the at the end of the predefine filter list
    DXCFILTER_CUSTOM      
} DXCONVFILTERTYPE;

[
    uuid(7BA7F8AF-E5EA-11d1-81DD-0000F87557DB),
    helpstring("IDXTConvolution Interface"),
    pointer_default(unique)
]
interface IDXTConvolution : IUnknown
{
    HRESULT SetFilterType( [in]DXCONVFILTERTYPE eType );
    HRESULT GetFilterType( [out]DXCONVFILTERTYPE* peType );
    HRESULT SetCustomFilter( [in]float *pFilter, [in]SIZE Size );
    HRESULT SetConvertToGray( [in]BOOL bConvertToGray );
    HRESULT GetConvertToGray( [out]BOOL* pbConvertToGray );
    HRESULT SetBias( [in]float Bias );
    HRESULT GetBias( [out]float* pBias );
    HRESULT SetExcludeAlpha( [in]BOOL bExcludeAlpha );
    HRESULT GetExcludeAlpha( [out]BOOL* pbExcludeAlpha );
};

//--- IDXTComposite -------------------------------------------------
// This is the compositor transform control interface
typedef enum DXCOMPFUNC
{
    DXCOMPFUNC_SWAP_AB  = 0x10,
    DXCOMPFUNC_FUNCMASK = 0xF,
    //--- Compositing functions
    DXCOMPFUNC_CLEAR = 0,
    DXCOMPFUNC_MIN,
    DXCOMPFUNC_MAX,
    DXCOMPFUNC_A,
    DXCOMPFUNC_A_OVER_B,
    DXCOMPFUNC_A_IN_B,
    DXCOMPFUNC_A_OUT_B,
    DXCOMPFUNC_A_ATOP_B,
    DXCOMPFUNC_A_SUBTRACT_B,
    DXCOMPFUNC_A_ADD_B,
    DXCOMPFUNC_A_XOR_B,
    DXCOMPFUNC_B            = ( DXCOMPFUNC_A            | DXCOMPFUNC_SWAP_AB ),
    DXCOMPFUNC_B_OVER_A     = ( DXCOMPFUNC_A_OVER_B     | DXCOMPFUNC_SWAP_AB ),
    DXCOMPFUNC_B_IN_A       = ( DXCOMPFUNC_A_IN_B       | DXCOMPFUNC_SWAP_AB ),
    DXCOMPFUNC_B_OUT_A      = ( DXCOMPFUNC_A_OUT_B      | DXCOMPFUNC_SWAP_AB ),
    DXCOMPFUNC_B_ATOP_A     = ( DXCOMPFUNC_A_ATOP_B     | DXCOMPFUNC_SWAP_AB ),
    DXCOMPFUNC_B_SUBTRACT_A = ( DXCOMPFUNC_A_SUBTRACT_B | DXCOMPFUNC_SWAP_AB ),
    DXCOMPFUNC_B_ADD_A      = ( DXCOMPFUNC_A_ADD_B      | DXCOMPFUNC_SWAP_AB ), 
    DXCOMPFUNC_NUMFUNCS             // This is used for range checking only
} DXCOMPFUNC;

typedef enum DXCOMPOSITEDISPID
{
    DISPID_DXCOMPOSITE_Function = 1,
} DXCOMPOSITEDISPID;

[
    object,
    uuid(9A43A843-0831-11D1-817F-0000F87557DB),
    dual,
    helpstring("IDXTComposite Interface"),
    pointer_default(unique)
]
interface IDXTComposite : IDispatch
{
    [propput, id(DISPID_DXCOMPOSITE_Function)]
        HRESULT Function([in] DXCOMPFUNC eFunc );
    [propget, id(DISPID_DXCOMPOSITE_Function)]
        HRESULT Function([out, retval]DXCOMPFUNC *peFunc );
};


//+-----------------------------------------------------------------------------
//
//  IDXTWipe Interface
//
//------------------------------------------------------------------------------

    typedef enum DXWIPEDIRECTION
    {
        DXWD_HORIZONTAL,
        DXWD_VERTICAL
    } DXWIPEDIRECTION;

    typedef enum DXWIPEDISPID
    {
        DISPID_DXW_GradientSize = DISPID_DXE_NEXT_ID,
        DISPID_DXW_WipeStyle,
        DISPID_DXW_Motion
    } DXWIPEDISPID;

    [
        object,
        uuid(AF279B2F-86EB-11D1-81BF-0000F87557DB),
        dual,
        helpstring("IDXTWipe Interface"),
        pointer_default(unique)
    ]
    interface IDXTWipe : IDXEffect
    {
        [propget, id(DISPID_DXW_GradientSize)]
            HRESULT GradientSize( [out, retval]float *pPercentSize );
        [propput, id(DISPID_DXW_GradientSize)]
            HRESULT GradientSize( [in]float PercentSize );
        [propget, id(DISPID_DXW_WipeStyle)]
            HRESULT WipeStyle( [out, retval]DXWIPEDIRECTION *pVal );
        [propput, id(DISPID_DXW_WipeStyle)]
            HRESULT WipeStyle( [in]DXWIPEDIRECTION newVal );
    };


//+-----------------------------------------------------------------------------
//
//  IDXTWipe2 Interface
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(E1FF8091-442B-4801-88B6-2B47B1611FD2),
        dual,
        helpstring("IDXTWipe2 Interface"),
        pointer_default(unique)
    ]
    interface IDXTWipe2 : IDXTWipe
    {
        [propget, id(DISPID_DXW_Motion)] 
            HRESULT Motion([out, retval] BSTR * pbstrMotion);
        [propput, id(DISPID_DXW_Motion)]
            HRESULT Motion([in] BSTR bstrMotion);
    };


//--- ICrBlur -------------------------------------------------
typedef enum CRBLURDISPID
{
    DISPID_CRB_MakeShadow = 1,
    DISPID_CRB_ShadowOpacity,
    DISPID_CRB_PixelRadius
} CRBLURDISPID;

[
    object,
    uuid(9F7C7827-E87A-11d1-81E0-0000F87557DB),
    dual,
    helpstring("ICrBlur Interface"),
    pointer_default(unique)
]
interface ICrBlur : IDispatch
{
    [propget, id(DISPID_CRB_MakeShadow)]
        HRESULT MakeShadow( [out, retval]VARIANT_BOOL *pVal );
    [propput, id(DISPID_CRB_MakeShadow)]
        HRESULT MakeShadow( [in]VARIANT_BOOL newVal );
    [propget, id(DISPID_CRB_ShadowOpacity)]
        HRESULT ShadowOpacity( [out, retval]float *pVal );
    [propput, id(DISPID_CRB_ShadowOpacity)]
        HRESULT ShadowOpacity( [in]float newVal );
    [propget, id(DISPID_CRB_PixelRadius)]
        HRESULT PixelRadius( [out, retval]float *pPixelRadius );
    [propput, id(DISPID_CRB_PixelRadius)]
        HRESULT PixelRadius( [in]float PixelRadius );
};

//--- ICrEngrave -------------------------------------------------
typedef enum CRENGRAVEDISPID
{
    DISPID_CREN_Bias = 1,
} CRENGRAVEDISPID;

[
    object,
    uuid(E4ACFB7F-053E-11d2-81EA-0000F87557DB),
    dual,
    helpstring("ICrEngrave Interface"),
    pointer_default(unique)
]
interface ICrEngrave : IDispatch
{
    [propget, id(DISPID_CREN_Bias)]
        HRESULT Bias( [out, retval]float *pVal );
    [propput, id(DISPID_CREN_Bias)]
        HRESULT Bias( [in]float newVal );
};

//--- ICrEmboss -------------------------------------------------
typedef enum CREMBOSSDISPID
{
    DISPID_CREM_Bias = 1,
} CREMBOSSDISPID;

[
    object,
    uuid(E4ACFB80-053E-11d2-81EA-0000F87557DB),
    dual,
    helpstring("ICrEmboss Interface"),
    pointer_default(unique)
]
interface ICrEmboss : IDispatch
{
    [propget, id(DISPID_CREM_Bias)]
        HRESULT Bias( [out, retval]float *pVal );
    [propput, id(DISPID_CREM_Bias)]
        HRESULT Bias( [in]float newVal );
};

//--- IDXTFade -------------------------------------------------
[
    object,
    uuid(16B280C4-EE70-11D1-9066-00C04FD9189D),
    dual,
    helpstring("IDXTFade Interface"),
    pointer_default(unique)
]
interface IDXTFade : IDXEffect
{
    [propget, id(1)] HRESULT Overlap([out, retval] float *pVal);
    [propput, id(1)] HRESULT Overlap([in] float newVal);
    [propget, id(2)] HRESULT Center([out, retval] BOOL *pVal);
    [propput, id(2)] HRESULT Center([in] BOOL newVal);
};

//--- IDXBasicImage -------------------------------------------------
[
    object,
    uuid(16B280C7-EE70-11D1-9066-00C04FD9189D),
    dual,
    helpstring("IDXBasicImage Interface"),
    pointer_default(unique)
]
interface IDXBasicImage : IDispatch
{
    [propget, id(1)] HRESULT Rotation([out, retval] int *pVal);
    [propput, id(1)] HRESULT Rotation([in] int newVal);
    [propget, id(2)] HRESULT Mirror([out, retval] BOOL *pVal);
    [propput, id(2)] HRESULT Mirror([in] BOOL newVal);
    [propget, id(3)] HRESULT GrayScale([out, retval] BOOL *pVal);
    [propput, id(3)] HRESULT GrayScale([in] BOOL newVal);
    [propget, id(4)] HRESULT Opacity([out, retval] float *pVal);
    [propput, id(4)] HRESULT Opacity([in] float newVal);
    [propget, id(5)] HRESULT Invert([out, retval] BOOL *pVal);
    [propput, id(5)] HRESULT Invert([in] BOOL newVal);
    [propget, id(6)] HRESULT XRay([out, retval] BOOL *pVal);
    [propput, id(6)] HRESULT XRay([in] BOOL newVal);
    [propget, id(7)] HRESULT Mask([out, retval] BOOL *pVal);
    [propput, id(7)] HRESULT Mask([in] BOOL newVal);
    [propget, id(8)] HRESULT MaskColor([out, retval] int *pVal);
    [propput, id(8)] HRESULT MaskColor([in] int newVal);
};


//--- IDXPixelate ---------------------------------------------------

[
    object,
    uuid(D33E180F-FBE9-11d1-906A-00C04FD9189D),
    dual,
    helpstring("IDXPixelate Interface"),
    pointer_default(unique)
]
interface IDXPixelate : IDXEffect
{
    [propget, id(1)] HRESULT MaxSquare([out, retval] int *pVal);
    [propput, id(1)] HRESULT MaxSquare([in] int newVal);
}


//+-----------------------------------------------------------------------------
//
//  ICrIris Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_CRIRIS {
        DISPID_CRIRIS_IRISSTYLE = 1,
        DISPID_CRIRIS_MOTION
    } DISPID_CRIRIS;

    [
        object,
        uuid(3F69F350-0379-11D2-A484-00C04F8EFB69),
        dual,
        helpstring("ICrIris Interface"),
        pointer_default(unique)
    ]
    interface ICrIris : IDXEffect
    {
        [propget, id(DISPID_CRIRIS_IRISSTYLE)]
            HRESULT irisStyle([out, retval] BSTR *pVal);
        [propput, id(DISPID_CRIRIS_IRISSTYLE)] 
            HRESULT irisStyle([in] BSTR newVal);
    };


//+-----------------------------------------------------------------------------
//
//  ICrIris2 Interface
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(F7B06961-BA8C-4970-918B-1C60CB9FF180),
        dual,
        helpstring("ICrIris2 Interface"),
        pointer_default(unique)
    ]
    interface ICrIris2 : ICrIris
    {
        [propget, id(DISPID_CRIRIS_MOTION)]
            HRESULT Motion([out, retval] BSTR * pbstrMotion);
        [propput, id(DISPID_CRIRIS_MOTION)]
            HRESULT Motion([in] BSTR bstrMotion);
    };


//************************************************************
//
// ICrSlide Interface
//
//************************************************************
    [
        object,
        uuid(810E402E-056B-11D2-A484-00C04F8EFB69),
        dual,
        helpstring("ICrSlide Interface"),
        pointer_default(unique)
    ]
    interface ICrSlide : IDXEffect
    {
        [propget, id(1)] HRESULT bands([out, retval] short *pVal);
        [propput, id(1)] HRESULT bands([in] short newVal);

        [propget, id(2)] HRESULT slideStyle([out, retval] BSTR *pVal);
        [propput, id(2)] HRESULT slideStyle([in] BSTR newVal);
    };


//+-----------------------------------------------------------------------------
//
//  ICrRadialWipe Interface
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(424B71AE-0695-11D2-A484-00C04F8EFB69),
        dual,
        helpstring("ICrRadialWipe Interface"),
        pointer_default(unique)
    ]
    interface ICrRadialWipe : IDXEffect
    {
        [propget, id(1)] HRESULT wipeStyle([out, retval] BSTR *pVal);
        [propput, id(1)] HRESULT wipeStyle([in] BSTR newVal);
    };


//+-----------------------------------------------------------------------------
//
//  ICrBarn Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_CRBARN {
        DISPID_CRBARN_MOTION = 1,
        DISPID_CRBARN_ORIENTATION
    } DISPID_CRBARN;

    [
        object,
        uuid(276A2EE0-0B5D-11D2-A484-00C04F8EFB69),
        dual,
        helpstring("ICrBarn Interface"),
        pointer_default(unique)
    ]
    interface ICrBarn : IDXEffect
    {
    };


//+-----------------------------------------------------------------------------
//
//  ICrBarn2 Interface
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(B66A7A1B-8FC6-448C-A2EB-3C55957478A1),
        dual,
        helpstring("ICrBarn2 Interface"),
        pointer_default(unique)
    ]
    interface ICrBarn2 : ICrBarn
    {
        [propget, id(DISPID_CRBARN_MOTION)]
            HRESULT Motion([out, retval] BSTR * pbstrMotion);
        [propput, id(DISPID_CRBARN_MOTION)]
            HRESULT Motion([in] BSTR bstrMotion);
        [propget, id(DISPID_CRBARN_ORIENTATION)]
            HRESULT Orientation([out, retval] BSTR * pbstrOrientation);
        [propput, id(DISPID_CRBARN_ORIENTATION)]
            HRESULT Orientation([in] BSTR bstrOrientation);
    };


//+-----------------------------------------------------------------------------
//
//  ICrBlinds Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_CRBLINDS {
        DISPID_CRBLINDS_BANDS = 1,
        DISPID_CRBLINDS_DIRECTION
    } DISPID_CRBLINDS;

    [
        object,
        uuid(5AF5C340-0BA9-11d2-A484-00C04F8EFB69),
        dual,
        helpstring("ICrBlinds Interface"),
        pointer_default(unique)
    ]
    interface ICrBlinds : IDXEffect
    {
        [propget, id(DISPID_CRBLINDS_BANDS)] 
            HRESULT bands([out, retval] short * pVal);
        [propput, id(DISPID_CRBLINDS_BANDS)] 
            HRESULT bands([in] short newVal);
    };


//+-----------------------------------------------------------------------------
//
//  ICrBlinds2 Interface
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(7059D403-599A-4264-8140-641EB8AE1F64),
        dual,
        helpstring("ICrBlinds2 Interface"),
        pointer_default(unique)
    ]
    interface ICrBlinds2 : ICrBlinds
    {
        [propget, id(DISPID_CRBLINDS_DIRECTION)]
            HRESULT Direction([out, retval] BSTR * pbstrDirection);
        [propput, id(DISPID_CRBLINDS_DIRECTION)]
            HRESULT Direction([in] BSTR bstrDirection);
    };


//************************************************************
//
// ICrInset Interface
//
//************************************************************
	[
		object,
		uuid(05C5EE20-0BA6-11d2-A484-00C04F8EFB69),
		dual,
		helpstring("ICrInset Interface"),
		pointer_default(unique)
	]
	interface ICrInset : IDXEffect
	{
	};

//************************************************************
//
// ICrStretch Interface
//
//************************************************************
	[
		object,
		uuid(6684AF00-0A87-11d2-A484-00C04F8EFB69),
		dual,
		helpstring("ICrStretch Interface"),
		pointer_default(unique)
	]
	interface ICrStretch : IDXEffect
	{
		[propget, id(1)] HRESULT stretchStyle([out, retval] BSTR *pVal);
		[propput, id(1)] HRESULT stretchStyle([in] BSTR newVal);
	};

//************************************************************
//
// IDXTGridSize Interface
//
//************************************************************
    [
        object,
        uuid(D6BBE91E-FF60-11d2-8F6E-00A0C9697274),
        dual,
        helpstring("IDXTGridSize Interface"),
        pointer_default(unique)
    ]
    interface IDXTGridSize : IDXEffect
    {
        [propget, id(1)] HRESULT gridSizeX([out, retval] short *pX);
        [propput, id(1)] HRESULT gridSizeX([in] short newX);
        [propget, id(2)] HRESULT gridSizeY([out, retval] short *pY);
        [propput, id(2)] HRESULT gridSizeY([in] short newY);
    }

//************************************************************
//
// ICrSpiral Interface
//
//************************************************************
	[
		object,
		uuid(0DE527A0-0C7E-11d2-A484-00C04F8EFB69),
		dual,
		helpstring("ICrSpiral Interface"),
		pointer_default(unique)
	]
	interface ICrSpiral : IDXTGridSize
	{
	};

//************************************************************
//
// ICrZigzag Interface
//
//************************************************************
	[
		object,
		uuid(4E5A64A0-0C8B-11d2-A484-00C04F8EFB69),
		dual,
		helpstring("ICrZigzag Interface"),
		pointer_default(unique)
	]
	interface ICrZigzag : IDXTGridSize
	{
	};

//************************************************************
//
// ICrWheel Interface
//
//************************************************************
	[
		object,
		uuid(3943DE80-1464-11d2-A484-00C04F8EFB69),
		dual,
		helpstring("ICrWheel Interface"),
		pointer_default(unique)
	]
	interface ICrWheel : IDXEffect
	{
		[propget, id(1)] HRESULT spokes([out, retval] short *pX);
		[propput, id(1)] HRESULT spokes([in] short newX);
	};

//************************************************************
//
// IDXTChroma Interface
//
//************************************************************
    [
        object,
        uuid(1D4637E2-383C-11d2-952A-00C04FA34F05),
        dual,
        helpstring("IDXTChroma Interface"),
        pointer_default(unique)
    ]
    interface IDXTChroma : IDispatch
    {
        [propput, id(1)] HRESULT Color([in] VARIANT newVal);
        [propget, id(1)] HRESULT Color([out, retval] VARIANT *pVal);
    };

//************************************************************
//
// IDXTDropShadow Interface
//
//************************************************************
    [
        object,
        uuid(1D4637E3-383C-11d2-952A-00C04FA34F05),
        dual,
        helpstring("IDXTDropShadow Interface"),
        pointer_default(unique)
    ]
    interface IDXTDropShadow : IDispatch
    {
        [propget, id(1)] HRESULT Color([out, retval] VARIANT *pVal);
        [propput, id(1)] HRESULT Color([in] VARIANT newVal);
        [propget, id(2)] HRESULT OffX([out, retval] int *pVal);
        [propput, id(2)] HRESULT OffX([in] int newVal);
        [propget, id(3)] HRESULT OffY([out, retval] int *pVal);
        [propput, id(3)] HRESULT OffY([in] int newVal);
        [propget, id(4)] HRESULT Positive([out, retval] VARIANT_BOOL *pVal);
        [propput, id(4)] HRESULT Positive([in] VARIANT_BOOL newVal);
    };


//+-----------------------------------------------------------------------------
//
//  IDXTCheckerBoard Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTCHECKERBOARD {
        DISPID_DXTCHECKERBOARD_DIRECTION = 1,
        DISPID_DXTCHECKERBOARD_SQUARESX,
        DISPID_DXTCHECKERBOARD_SQUARESY
    } DISPID_DXTCHECKERBOARD;

    [
        object,
        uuid(AD3C2576-117C-4510-84DD-B668971DCFD1),
        dual,
        helpstring("IDXTCheckerBoard Interface"),
        pointer_default(unique)
    ]
    interface IDXTCheckerBoard : IDXEffect
    {
        [propget, id(DISPID_DXTCHECKERBOARD_DIRECTION)] 
            HRESULT Direction([out, retval] BSTR * pbstrDirection);
        [propput, id(DISPID_DXTCHECKERBOARD_DIRECTION)] 
            HRESULT Direction([in] BSTR bstrDirection);
        [propget, id(DISPID_DXTCHECKERBOARD_SQUARESX)] 
            HRESULT SquaresX([out, retval] int * pnSquaresX);
        [propput, id(DISPID_DXTCHECKERBOARD_SQUARESX)] 
            HRESULT SquaresX([in] int nSquaresX);
        [propget, id(DISPID_DXTCHECKERBOARD_SQUARESY)] 
            HRESULT SquaresY([out, retval] int * pnSquaresY);
        [propput, id(DISPID_DXTCHECKERBOARD_SQUARESY)] 
            HRESULT SquaresY([in] int nSquaresY);
    };


//+-----------------------------------------------------------------------------
//
//  IDXTRevealTrans Interface
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(B8095006-A128-464B-8B2D-90580AEE2B05),
        dual,
        helpstring("IDXTRevealTrans Interface"),
        pointer_default(unique)
    ]
    interface IDXTRevealTrans : IDXEffect
    {
        [propget, id(1)] HRESULT Transition([out, retval] int * pnTransition);
        [propput, id(1)] HRESULT Transition([in] int nTransition);
    };


//+-----------------------------------------------------------------------------
//
//  IDXTMask Interface
//
//------------------------------------------------------------------------------

    [ 
        object,
        uuid(A1067146-B063-47d7-A54A-2C2309E9889D),
        dual,
        helpstring("IDXTMask Interface"),
        pointer_default(unique)
    ]
    interface IDXTMask : IDispatch
    {
        [propget, id(1)] HRESULT Color([out, retval] VARIANT * pvarColor);
        [propput, id(1)] HRESULT Color([in] VARIANT varColor);
    };



//+-----------------------------------------------------------------------------
//
//  IDXTAlphaImageLoader Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTALPHAIMAGELOADER
    {
        DISPID_DXTALPHAIMAGELOADER_SRC = 1,
        DISPID_DXTALPHAIMAGELOADER_SIZINGMETHOD,
    } DISPID_DXTALPHAIMAGELOADER;

    [
        object,
        uuid(A5F2D3E8-7A7E-48E5-BC75-40790BE4A941),
        dual,
        helpstring("IDXTAlphaImageLoader Interface"),
        pointer_default(unique)
    ]
    interface IDXTAlphaImageLoader : IDispatch
    {
        [propget, id(DISPID_DXTALPHAIMAGELOADER_SRC)] 
            HRESULT Src([out, retval] BSTR * pbstrSrc);
        [propput, id(DISPID_DXTALPHAIMAGELOADER_SRC)]
            HRESULT Src([in] BSTR bstrSrc);
        [propget, id(DISPID_DXTALPHAIMAGELOADER_SIZINGMETHOD)]
            HRESULT SizingMethod([out, retval] BSTR * pbstrSizingMethod);
        [propput, id(DISPID_DXTALPHAIMAGELOADER_SIZINGMETHOD)]
            HRESULT SizingMethod([in] BSTR bstrSizingMethod);
    };


//+-----------------------------------------------------------------------------
//
//  IDXTRandomBars Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTRANDOMBARS
    {
        DISPID_DXTRANDOMBARS_ORIENTATION = 1
    } DISPID_DXTRANDOMBARS;

    [
        object,
        uuid(8A6D2022-4A8F-4EB9-BB25-AA05201F9C84),
        dual,
        helpstring("IDXTRandomBars Interface"),
        pointer_default(unique)
    ]
    interface IDXTRandomBars : IDXEffect
    {
        [propget, id(DISPID_DXTRANDOMBARS_ORIENTATION)]
            HRESULT Orientation([out, retval] BSTR * pbstrOrientation);
        [propput, id(DISPID_DXTRANDOMBARS_ORIENTATION)]
            HRESULT Orientation([in] BSTR bstrOrientation);
    };


//+-----------------------------------------------------------------------------
//
//  IDXTStrips Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTSTRIPS
    {
        DISPID_DXTSTRIPS_MOTION = 1,
    } DISPID_DXTSTRIPS;

    [
        object,
        uuid(A83C9B5C-FB11-4AF5-8F65-D03F151D3ED5),
        dual,
        helpstring("IDXTStrips Interface"),
        pointer_default(unique)
    ]
    interface IDXTStrips : IDXEffect
    {
        [propget, id(DISPID_DXTSTRIPS_MOTION)]
            HRESULT Motion([out, retval] BSTR * pbstrMotion);
        [propput, id(DISPID_DXTSTRIPS_MOTION)]
            HRESULT Motion([in] BSTR bstrMotion);
    };


// CSS Transforms

//************************************************************
//
// IDXTAlpha Interface
//
//************************************************************
    [
        object,
        uuid(1D4637E0-383C-11d2-952A-00C04FA34F05),
        dual,
        helpstring("IDXTAlpha Interface"),
        pointer_default(unique)
    ]
    interface IDXTAlpha : IDispatch
    {
        [propget, id(1)] HRESULT Opacity([out, retval] long *pVal);
        [propput, id(1)] HRESULT Opacity([in] long newVal);
        [propget, id(2)] HRESULT FinishOpacity([out, retval] long *pVal);
        [propput, id(2)] HRESULT FinishOpacity([in] long newVal);
        [propget, id(3)] HRESULT Style([out, retval] long *pVal);
        [propput, id(3)] HRESULT Style([in] long newVal);
        [propget, id(4)] HRESULT StartX([out, retval] long *pVal);
        [propput, id(4)] HRESULT StartX([in] long newVal);
        [propget, id(5)] HRESULT StartY([out, retval] long *pVal);
        [propput, id(5)] HRESULT StartY([in] long newVal);
        [propget, id(6)] HRESULT FinishX([out, retval] long *pVal);
        [propput, id(6)] HRESULT FinishX([in] long newVal);
        [propget, id(7)] HRESULT FinishY([out, retval] long *pVal);
        [propput, id(7)] HRESULT FinishY([in] long newVal);
    };

//************************************************************
//
// IDXTGlow Interface
//
//************************************************************
    [
        object,
        uuid(1D4637E4-383C-11d2-952A-00C04FA34F05),
        dual,
        helpstring("IDXTGlow Interface"),
        pointer_default(unique)
    ]
    interface IDXTGlow : IDispatch
    {
        [propget, id(1)] HRESULT Color([out, retval] VARIANT * pvarColor);
        [propput, id(1)] HRESULT Color([in] VARIANT varColor);
        [propget, id(2)] HRESULT Strength([out, retval] long *pVal);
        [propput, id(2)] HRESULT Strength([in] long newVal);
    };

//************************************************************
//
// IDXTShadow Interface
//
//************************************************************
    [
        object,
        uuid(1D4637E6-383C-11d2-952A-00C04FA34F05),
        dual,
        helpstring("IDXTShadow Interface"),
        pointer_default(unique)
    ]
    interface IDXTShadow : IDispatch
    {
        [propput, id(1)] HRESULT Color([in] BSTR bstrColor);
        [propget, id(1)] HRESULT Color([out, retval] BSTR * pbstrColor);
        [propget, id(2)] HRESULT Direction([out, retval] long *pVal);
        [propput, id(2)] HRESULT Direction([in] long newVal);
        [propget, id(3)] HRESULT Strength([out, retval] long *pVal);
        [propput, id(3)] HRESULT Strength([in] long newVal);
    };

//+-----------------------------------------------------------------------------
//
//  IDXTWave Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTWAVE {
        DISPID_DXTWAVE_ADD = 1,
        DISPID_DXTWAVE_FREQ,
        DISPID_DXTWAVE_LIGHTSTRENGTH,
        DISPID_DXTWAVE_PHASE,
        DISPID_DXTWAVE_STRENGTH
    } DISPID_DXTWAVE;

    [
        object,
        uuid(1D4637E7-383C-11d2-952A-00C04FA34F05),
        dual,
        helpstring("IDXTWave Interface"),
        pointer_default(unique)
    ]
    interface IDXTWave : IDispatch
    {
        [propget, id(DISPID_DXTWAVE_ADD)] 
            HRESULT Add([out, retval] VARIANT_BOOL *pVal);
        [propput, id(DISPID_DXTWAVE_ADD)] 
            HRESULT Add([in] VARIANT_BOOL newVal);
        [propget, id(DISPID_DXTWAVE_FREQ)] 
            HRESULT Freq([out, retval] long *pVal);
        [propput, id(DISPID_DXTWAVE_FREQ)] 
            HRESULT Freq([in] long newVal);
        [propget, id(DISPID_DXTWAVE_LIGHTSTRENGTH)] 
            HRESULT LightStrength([out, retval] int *pVal);
        [propput, id(DISPID_DXTWAVE_LIGHTSTRENGTH)] 
            HRESULT LightStrength([in] int newVal);
        [propget, id(DISPID_DXTWAVE_PHASE)] 
            HRESULT Phase([out, retval] int *pVal);
        [propput, id(DISPID_DXTWAVE_PHASE)] 
            HRESULT Phase([in] int newVal);
        [propget, id(DISPID_DXTWAVE_STRENGTH)] 
            HRESULT Strength([out, retval] long *pVal);
        [propput, id(DISPID_DXTWAVE_STRENGTH)] 
            HRESULT Strength([in] long newVal);
    };


//************************************************************
//
// IDXTLight Interface
//
//************************************************************

    [
        object,
        uuid(F9EFBEC1-4302-11D2-952A-00C04FA34F05),
        dual,
        helpstring("IDXTLight Interface"),
        pointer_default(unique)
    ]
    interface IDXTLight : IDispatch
    {
        [id(1)] HRESULT addAmbient(int r, int g, int b, int strength);
        [id(2)] HRESULT addPoint(int x, int y, int z, int r, int g, int b, int strength);
        [id(3)] HRESULT addCone(int x, int y, int z, int tx, int ty, int r, int g, int b, int strength, int spread);
        [id(4)] HRESULT moveLight(int lightNum, int x, int y, int z, BOOL fAbsolute);
        [id(5)] HRESULT ChangeStrength(int lightNum, int dStrength, BOOL fAbsolute);
        [id(6)] HRESULT ChangeColor(int lightNum, int R, int G, int B, BOOL fAbsolute);
        [id(7)] HRESULT Clear();
    };


//+-----------------------------------------------------------------------------
//
//  IDXTMotionBlur Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTMOTIONBLUR {
        DISPID_DXTMOTIONBLUR_ADD = 1,
        DISPID_DXTMOTIONBLUR_DIRECTION,
        DISPID_DXTMOTIONBLUR_STRENGTH
    } DISPID_DXTMOTIONBLUR;

    [
        object,
        uuid(089057BE-D3F5-4A2C-B10A-A5130184A0F7),
        dual,
        helpstring("IDXTMotionBlur Interface"),
        pointer_default(unique)
    ]
    interface IDXTMotionBlur : IDispatch
    {
        [propget, id(DISPID_DXTMOTIONBLUR_ADD)] 
            HRESULT Add([out, retval] VARIANT_BOOL * pfAdd);
        [propput, id(DISPID_DXTMOTIONBLUR_ADD)]
            HRESULT Add([in] VARIANT_BOOL fAdd);
        [propget, id(DISPID_DXTMOTIONBLUR_DIRECTION)]
            HRESULT Direction([out, retval] short * pnDirection);
        [propput, id(DISPID_DXTMOTIONBLUR_DIRECTION)]
            HRESULT Direction([in] short nDirection);
        [propget, id(DISPID_DXTMOTIONBLUR_STRENGTH)]
            HRESULT Strength([out, retval] long * pnStrength);
        [propput, id(DISPID_DXTMOTIONBLUR_STRENGTH)]
            HRESULT Strength([in] long nStrength);
    };


//+-----------------------------------------------------------------------------
//
//  IDXTMatrix Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTMATRIX {
        DISPID_DXTMATRIX_M11 = 1,
        DISPID_DXTMATRIX_M12,
        DISPID_DXTMATRIX_DX,
        DISPID_DXTMATRIX_M21,
        DISPID_DXTMATRIX_M22,
        DISPID_DXTMATRIX_DY,
        DISPID_DXTMATRIX_SIZINGMETHOD,
        DISPID_DXTMATRIX_FILTERTYPE
    } DISPID_DXTMATRIX;

    [
        object,
        uuid(AC66A493-0F0C-4C76-825C-9D68BEDE9188),
        dual,
        helpstring("IDXTMatrix Interface"),
        pointer_default(unique)
    ]
    interface IDXTMatrix : IDispatch
    {
        [propget, id(DISPID_DXTMATRIX_M11)]
            HRESULT M11([out, retval] float * pflM11);
        [propput, id(DISPID_DXTMATRIX_M11)]
            HRESULT M11([in] const float flM11);
        [propget, id(DISPID_DXTMATRIX_M12)]
            HRESULT M12([out, retval] float * pflM12);
        [propput, id(DISPID_DXTMATRIX_M12)]
            HRESULT M12([in] const float flM12);
        [propget, id(DISPID_DXTMATRIX_DX)]
            HRESULT Dx([out, retval] float * pfldx);
        [propput, id(DISPID_DXTMATRIX_DX)]
            HRESULT Dx([in] const float fldx);
        [propget, id(DISPID_DXTMATRIX_M21)]
            HRESULT M21([out, retval] float * pflM21);
        [propput, id(DISPID_DXTMATRIX_M21)]
            HRESULT M21([in] const float flM21);
        [propget, id(DISPID_DXTMATRIX_M22)]
            HRESULT M22([out, retval] float * pflM22);
        [propput, id(DISPID_DXTMATRIX_M22)]
            HRESULT M22([in] const float flM22);
        [propget, id(DISPID_DXTMATRIX_DY)]
            HRESULT Dy([out, retval] float * pfldy);
        [propput, id(DISPID_DXTMATRIX_DY)]
            HRESULT Dy([in] const float fldy);
        [propget, id(DISPID_DXTMATRIX_SIZINGMETHOD)]
            HRESULT SizingMethod([out, retval] BSTR * pbstrSizingMethod);
        [propput, id(DISPID_DXTMATRIX_SIZINGMETHOD)]
            HRESULT SizingMethod([in] const BSTR bstrSizingMethod);
        [propget, id(DISPID_DXTMATRIX_FILTERTYPE)]
            HRESULT FilterType([out, retval] BSTR * pbstrFilterType);
        [propput, id(DISPID_DXTMATRIX_FILTERTYPE)]
            HRESULT FilterType([in] const BSTR bstrFilterType);
    };


//+-----------------------------------------------------------------------------
//
//  IDXTICMFilter Interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DXTICMFILTER {
        DISPID_DXTICMFILTER_COLORSPACE = 1,
        DISPID_DXTICMFILTER_INTENT
    } DISPID_DXTICMFILTER;

    [
        object,
        uuid(734321ED-1E7B-4E1C-BBFA-89C819800E2F),
        dual,
        helpstring("IDXTICMFilter Interface"),
        pointer_default(unique)
    ]
    interface IDXTICMFilter : IDispatch
    {
        [propget, id(DISPID_DXTICMFILTER_COLORSPACE)]
            HRESULT ColorSpace([out, retval] BSTR * pbstrColorSpace);
        [propput, id(DISPID_DXTICMFILTER_COLORSPACE)]
            HRESULT ColorSpace([in] BSTR bstrColorSpace);
        [propget, id(DISPID_DXTICMFILTER_INTENT)]
            HRESULT Intent([out, retval] short * pnIntent);
        [propput, id(DISPID_DXTICMFILTER_INTENT)]
            HRESULT Intent([in] short nIntent);
	};


///////////////////////////////////////////////////////////////////////////
//
//=== CoClass definitions =================================================
//
///////////////////////////////////////////////////////////////////////////
[
    uuid(5E77EB03-937C-11D1-B047-00AA003B6061),
    version(1.1),
    helpstring("Microsoft DirectX Transforms Image Transforms Type Library")
]
library DXTMSFTLib
{
    importlib("stdole2.tlb");

////////////////////////////

    [
        uuid(9A43A844-0831-11D1-817F-0000F87557DB),
        helpstring("DXTComposite Class")
    ]
    coclass DXTComposite
    {
        [default] interface IDXTComposite;
    };

////////////////////////////

    [
        uuid(1E54333B-2A00-11d1-8198-0000F87557DB),
        helpstring("DXLUTBuilder Class")
    ]
    coclass DXLUTBuilder
    {
        [default] interface IDXDLUTBuilder;
        interface IDXLUTBuilder;
        interface IDXLookupTable;
    };

////////////////////////////

    [
        uuid(623E2882-FC0E-11d1-9A77-0000F8756A10),
        helpstring("DXTGradientD Class")
    ]
    coclass DXTGradientD
    {
        [default] interface IDXTGradientD;
    };

//+-----------------------------------------------------------------------------
//
//  DXTWipe class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(AF279B30-86EB-11D1-81BF-0000F87557DB),
        helpstring("DXTWipe Class")
    ]
    coclass DXTWipe
    {
        [default] interface IDXTWipe2;
    };


//+-----------------------------------------------------------------------------
//
//  DXTGradientWipe class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(B96F67A2-30C2-47E8-BD85-70A2C948B50F),
        helpstring("DXTGradientWipe Class")
    ]
    coclass DXTGradientWipe
    {
        [default] interface IDXTWipe2;
    };


////////////////////////////

    [
        uuid(2BC0EF29-E6BA-11d1-81DD-0000F87557DB),
        helpstring("DXTConvolution Class")
    ]
    coclass DXTConvolution
    {
        [default] interface IDXTConvolution;
    };

////////////////////////////

    [
        uuid(7312498D-E87A-11d1-81E0-0000F87557DB),
        helpstring("CrBlur Class")
    ]
    coclass CrBlur
    {
        [default] interface ICrBlur;
    };

////////////////////////////

    [
        uuid(F515306D-0156-11d2-81EA-0000F87557DB),
        helpstring("CrEmboss Class")
    ]
    coclass CrEmboss
    {
        [default] interface ICrEmboss;
    };

////////////////////////////

    [
        uuid(F515306E-0156-11d2-81EA-0000F87557DB),
        helpstring("CrEngrave Class")
    ]
    coclass CrEngrave
    {
        [default] interface ICrEngrave;
    };

////////////////////////////

    [
        uuid(16B280C5-EE70-11D1-9066-00C04FD9189D),
        helpstring("DXFade Class")
    ]
    coclass DXFade
    {
        [default] interface IDXTFade;
    };

////////////////////////////

    [
        uuid(16B280C8-EE70-11D1-9066-00C04FD9189D),
        helpstring("BasicImageEffects Class")
    ]
    coclass BasicImageEffects
    {
        [default] interface IDXBasicImage;
    };

////////////////////////////

    [
        uuid(4CCEA634-FBE0-11d1-906A-00C04FD9189D),
        helpstring("Pixelate Effect Class")
    ]
    coclass Pixelate
    {
        [default] interface IDXPixelate;
    }


//+-----------------------------------------------------------------------------
//
//  CrIris class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(3F69F351-0379-11D2-A484-00C04F8EFB69),
        helpstring("CrIris Class")
    ]
    coclass CrIris
    {
        [default] interface ICrIris2;
    };


//+-----------------------------------------------------------------------------
//
//  DXTIris class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(049F2CE6-D996-4721-897A-DB15CE9EB73D),
        helpstring("DXTIris Class")
    ]
    coclass DXTIris
    {
        [default] interface ICrIris2;
    };


//+-----------------------------------------------------------------------------
//
// CrSlide class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(810E402F-056B-11D2-A484-00C04F8EFB69),
        helpstring("CrSlide Class")
    ]
    coclass CrSlide
    {
        [default] interface ICrSlide;
    };


//+-----------------------------------------------------------------------------
//
// DXTSlide class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(D1C5A1E7-CC47-4E32-BDD2-4B3C5FC50AF5),
        helpstring("DXTSlide Class")
    ]
    coclass DXTSlide
    {
        [default] interface ICrSlide;
    };


//+-----------------------------------------------------------------------------
//
//  CrRadialWipe class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(424B71AF-0695-11D2-A484-00C04F8EFB69),
        helpstring("CrRadialWipe")
    ]
    coclass CrRadialWipe
    {
        [default] interface ICrRadialWipe;
    };


//+-----------------------------------------------------------------------------
//
//  DXTRadialWipe class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(164484A9-35D9-4FB7-9FAB-48273B96AA1D),
        helpstring("DXTRadialWipe")
    ]
    coclass DXTRadialWipe
    {
        [default] interface ICrRadialWipe;
    };


//+-----------------------------------------------------------------------------
//
//  CrBarn class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(C3BDF740-0B58-11d2-A484-00C04F8EFB69),
        helpstring("CrBarn Class")
    ]
    coclass CrBarn
    {
        [default] interface ICrBarn2;
    };


//+-----------------------------------------------------------------------------
//
//  DXTBarn class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(EC9BA17D-60B5-462B-A6D8-14B89057E22A),
        helpstring("DXTBarn Class")
    ]
    coclass DXTBarn
    {
        [default] interface ICrBarn2;
    };


//+-----------------------------------------------------------------------------
//
//  CrBlinds class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(00C429C0-0BA9-11d2-A484-00C04F8EFB69),
        helpstring("CrBlinds Class")
    ]
    coclass CrBlinds
    {
        [default] interface ICrBlinds2;
    };


//+-----------------------------------------------------------------------------
//
//  DXTBlinds class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(9A4A4A51-FB3A-4F4B-9B57-A2912A289769),
        helpstring("DXTBlinds Class")
    ]
    coclass DXTBlinds
    {
        [default] interface ICrBlinds2;
    };


//+-----------------------------------------------------------------------------
//
//  CrStretch class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(7658F2A2-0A83-11d2-A484-00C04F8EFB69),
        helpstring("CrStretch Class")
    ]
    coclass CrStretch
    {
        [default] interface ICrStretch;
    };


//+-----------------------------------------------------------------------------
//
//  DXTStretch class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(F088DE73-BDD0-4E3C-81F8-6D32F4FE9D28),
        helpstring("DXTStretch Class")
    ]
    coclass DXTStretch
    {
        [default] interface ICrStretch;
    };


//+-----------------------------------------------------------------------------
//
//  CrInset class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(93073C40-0BA5-11d2-A484-00C04F8EFB69),
        helpstring("CrInset Class")
    ]
    coclass CrInset
    {
        [default] interface ICrInset;
    };


//+-----------------------------------------------------------------------------
//
//  DXTInset class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(76F363F2-7E9F-4ED7-A6A7-EE30351B6628),
        helpstring("DXTInset Class")
    ]
    coclass DXTInset
    {
        [default] interface ICrInset;
    };


//+-----------------------------------------------------------------------------
//
//  CrSpiral class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(ACA97E00-0C7D-11d2-A484-00C04F8EFB69),
        helpstring("CrSpiral Class")
    ]
    coclass CrSpiral
    {
        [default] interface ICrSpiral;
    };


//+-----------------------------------------------------------------------------
//
//  DXTSpiral class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(4A03DCB9-6E17-4A39-8845-4EE7DC5331A5),
        helpstring("DXTSpiral Class")
    ]
    coclass DXTSpiral
    {
        [default] interface ICrSpiral;
    };


//+-----------------------------------------------------------------------------
//
//  CrZigzag class (not optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(E6E73D20-0C8A-11D2-A484-00C04F8EFB69),
        helpstring("CrZigzag Class")
    ]
    coclass CrZigzag
    {
        [default] interface ICrZigzag;
    };

//+-----------------------------------------------------------------------------
//
//  DXTZigzag class (optimized)
//
//------------------------------------------------------------------------------

    [
        uuid(23E26328-3928-40F2-95E5-93CAD69016EB),
        helpstring("DXTZigZag Class")
    ]
    coclass DXTZigzag
    {
        [default] interface ICrZigZag;
    };


    /////////////////////////////////
    // CrWheel Class
    /////////////////////////////////
    [
        uuid(5AE1DAE0-1461-11d2-A484-00C04F8EFB69),
        helpstring("CrWheel Class")
    ]
    coclass CrWheel
    {
        [default] interface ICrWheel;
    };

    /////////////////////////////////
    // DXTChroma Class
    /////////////////////////////////
    [
        uuid(421516C1-3CF8-11D2-952A-00C04FA34F05),
        helpstring("Chroma Class")
    ]
    coclass DXTChroma
    {
        [default] interface IDXTChroma;
    };

    /////////////////////////////////
    // DXTDropShadow Class
    /////////////////////////////////
    [
        uuid(ADC6CB86-424C-11D2-952A-00C04FA34F05),
        helpstring("DropShadow Class")
    ]
    coclass DXTDropShadow
    {
        [default] interface IDXTDropShadow;
    };


//+-----------------------------------------------------------------------------
//
//  DXTCheckerBoard Class
//
//------------------------------------------------------------------------------

    [
        uuid(B3EE7802-8224-4787-A1EA-F0DE16DEABD3),
        helpstring("DXTCheckerBoard Class")
    ]
    coclass DXTCheckerBoard
    {
        [default] interface IDXTCheckerBoard;
    };


//+-----------------------------------------------------------------------------
//
//  DXTRevealTrans Class
//
//------------------------------------------------------------------------------

    [
        uuid(E31E87C4-86EA-4940-9B8A-5BD5D179A737),
        helpstring("DXTRevealTrans Class")
    ]
    coclass DXTRevealTrans
    {
        [default] interface IDXTRevealTrans;
    };


//+-----------------------------------------------------------------------------
//
//  DXTMaskFilter Class
//
//------------------------------------------------------------------------------

    [
        uuid(3A04D93B-1EDD-4f3f-A375-A03EC19572C4),
        helpstring("DXTMaskFilter Class")
    ]
    coclass DXTMaskFilter
    {
        [default] interface IDXTMask;
    };



//+-----------------------------------------------------------------------------
//
//  DXTAlphaImageLoader Class
//
//------------------------------------------------------------------------------

    [
        uuid(0C7EFBDE-0303-4C6F-A4F7-31FA2BE5E397),
        helpstring("DXTAlphaImageLoader Class")
    ]
    coclass DXTAlphaImageLoader
    {
        [default] interface IDXTAlphaImageLoader;
    };

      
//+-----------------------------------------------------------------------------
//
//  DXTRandomDissolve Class
//
//------------------------------------------------------------------------------

    [
        uuid(F7F4A1B6-8E87-452F-A2D7-3077F508DBC0),
        helpstring("DXTRandomDissolve Class")
    ]
    coclass DXTRandomDissolve
    {
        [default] interface IDXEffect;
    };


//+-----------------------------------------------------------------------------
//
//  DXTRandomBars Class
//
//------------------------------------------------------------------------------

    [
        uuid(2E7700B7-27C4-437F-9FBF-1E8BE2817566),
        helpstring("DXTRandomBars Class")
    ]
    coclass DXTRandomBars
    {
        [default] interface IDXTRandomBars;
    };
        

//+-----------------------------------------------------------------------------
//
//  DXTStrips Class
//
//------------------------------------------------------------------------------

    [
        uuid(63A4B1FC-259A-4A5B-8129-A83B8C9E6F4F),
        helpstring("DXTStrips Class")
    ]
    coclass DXTStrips
    {
        [default] interface IDXTStrips;
    };


    /////////////////////////////////
    // DXTGlow Class
    /////////////////////////////////
    [
        uuid(9F8E6421-3D9B-11D2-952A-00C04FA34F05),
        helpstring("DXTGlow Class")
    ]
    coclass DXTGlow
    {
        [default] interface IDXTGlow;
    };

    /////////////////////////////////
    // DXTShadow Class
    /////////////////////////////////
    [
        uuid(E71B4063-3E59-11D2-952A-00C04FA34F05),
        helpstring("DXTShadow Class")
    ]
    coclass DXTShadow
    {
        [default] interface IDXTShadow;
    };

    /////////////////////////////////
    // DXTAlpha Class
    /////////////////////////////////
    [
        uuid(ADC6CB82-424C-11D2-952A-00C04FA34F05),
        helpstring("DXTAlpha Class")
    ]
    coclass DXTAlpha
    {
        [default] interface IDXTAlpha;
    };

    /////////////////////////////////
    // DXTWave Class
    /////////////////////////////////
    [
        uuid(ADC6CB88-424C-11D2-952A-00C04FA34F05),
        helpstring("DXTWave Class")
    ]
    coclass DXTWave
    {
        [default] interface IDXTWave;
    };

    /////////////////////////////////
    // DXTLight Class
    /////////////////////////////////
    [
        uuid(F9EFBEC2-4302-11D2-952A-00C04FA34F05),
        helpstring("DXTLight Class")
    ]
    coclass DXTLight
    {
        [default] interface IDXTLight;
    };


//+-----------------------------------------------------------------------------
//
//  DXTMotionBlur class
//
//------------------------------------------------------------------------------

    [
        uuid(DD13DE77-D3BA-42D4-B5C6-7745FA4E2D4B),
        helpstring("DXTMotionBlur Class")
    ]
    coclass DXTMotionBlur
    {
        [default] interface IDXTMotionBlur;
    };


//+-----------------------------------------------------------------------------
//
//  DXTMatrix class
//
//------------------------------------------------------------------------------

    [
        uuid(4ABF5A06-5568-4834-BEE3-327A6D95A685),
        helpstring("DXTMatrix Class")
    ]
    coclass DXTMatrix
    {
        [default] interface IDXTMatrix;
    };


//+-----------------------------------------------------------------------------
//
//  DXTICMFilter class
//
//------------------------------------------------------------------------------

    [
        uuid(A1BFB370-5A9F-4429-BB72-B13E2FEAEDEF),
        helpstring("DXTICMFilter Class")
    ]
    coclass DXTICMFilter
    {
        [default] interface IDXTICMFilter;
    };


}; // End of library block
