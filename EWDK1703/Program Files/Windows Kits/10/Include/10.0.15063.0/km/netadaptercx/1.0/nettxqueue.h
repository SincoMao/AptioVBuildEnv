/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    NetTxQueue.h

Abstract:

    This is the interfaces for the NetTxQueue

Environment:

    kernel mode only

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _NETTXQUEUE_H_
#define _NETTXQUEUE_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START




typedef struct NETTXQUEUE_INIT *PNETTXQUEUE_INIT;

typedef
_Function_class_(EVT_TXQUEUE_CANCEL)
_IRQL_requires_same_
_IRQL_requires_(PASSIVE_LEVEL)
VOID
EVT_TXQUEUE_CANCEL(
    _In_
    NETTXQUEUE TxQueue
    );

typedef EVT_TXQUEUE_CANCEL *PFN_TXQUEUE_CANCEL;

typedef
_Function_class_(EVT_TXQUEUE_SET_NOTIFICATION_ENABLED)
_IRQL_requires_same_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
EVT_TXQUEUE_SET_NOTIFICATION_ENABLED(
    _In_
    NETTXQUEUE TxQueue,
    _In_
    BOOLEAN NotificationEnabled
    );

typedef EVT_TXQUEUE_SET_NOTIFICATION_ENABLED *PFN_TXQUEUE_SET_NOTIFICATION_ENABLED;

typedef
_Function_class_(EVT_TXQUEUE_ADVANCE)
_IRQL_requires_same_
_IRQL_requires_max_(DISPATCH_LEVEL)
VOID
EVT_TXQUEUE_ADVANCE(
    _In_ 
    NETTXQUEUE TxQueue
    );

typedef EVT_TXQUEUE_ADVANCE *PFN_TXQUEUE_ADVANCE;

typedef struct _NET_TXQUEUE_CONFIG
{
    //
    // Size of structure. 
    //
    ULONG Size;

    PFN_TXQUEUE_CANCEL EvtTxQueueCancel;

    PFN_TXQUEUE_SET_NOTIFICATION_ENABLED EvtTxQueueSetNotificationEnabled;

    PFN_TXQUEUE_ADVANCE EvtTxQueueAdvance;

    PCNET_CONTEXT_TYPE_INFO ContextTypeInfo;

} NET_TXQUEUE_CONFIG, *PNET_TXQUEUE_CONFIG;

VOID
FORCEINLINE
NET_TXQUEUE_CONFIG_INIT(
    _Out_ PNET_TXQUEUE_CONFIG NetTxQueueConfig,
    _In_  PFN_TXQUEUE_ADVANCE EvtTxQueueAdvance,
    _In_  PFN_TXQUEUE_SET_NOTIFICATION_ENABLED EvtTxQueueSetNotificationEnabled,
    _In_  PFN_TXQUEUE_CANCEL EvtTxQueueCancel
)
{
    RtlZeroMemory(NetTxQueueConfig, sizeof(NET_TXQUEUE_CONFIG));
    NetTxQueueConfig->Size = sizeof(NET_TXQUEUE_CONFIG);
    NetTxQueueConfig->EvtTxQueueAdvance = EvtTxQueueAdvance;
    NetTxQueueConfig->EvtTxQueueSetNotificationEnabled = EvtTxQueueSetNotificationEnabled;
    NetTxQueueConfig->EvtTxQueueCancel = EvtTxQueueCancel;
}

#define NET_TXQUEUE_CONFIG_SET_DEFAULT_PACKET_CONTEXT_TYPE(_queueconfig, _contexttype)          \
    (_queueconfig)->ContextTypeInfo = WDF_GET_CONTEXT_TYPE_INFO(_contexttype);                  \

//
// NET Function: NetTxQueueCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(*PFN_NETTXQUEUECREATE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _Inout_
    PNETTXQUEUE_INIT NetTxQueueInit,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES TxQueueAttributes,
    _In_
    PNET_TXQUEUE_CONFIG Configuration,
    _Out_
    NETTXQUEUE* TxQueue
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
FORCEINLINE
NetTxQueueCreate(
    _Inout_
    PNETTXQUEUE_INIT NetTxQueueInit,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES TxQueueAttributes,
    _In_
    PNET_TXQUEUE_CONFIG Configuration,
    _Out_
    NETTXQUEUE* TxQueue
    )
{
    return ((PFN_NETTXQUEUECREATE) NetFunctions[NetTxQueueCreateTableIndex])(NetDriverGlobals, NetTxQueueInit, TxQueueAttributes, Configuration, TxQueue);
}

//
// NET Function: NetTxQueueNotifyMoreCompletedPacketsAvailable
//
typedef
_IRQL_requires_max_(HIGH_LEVEL)
WDFAPI
VOID
(*PFN_NETTXQUEUENOTIFYMORECOMPLETEDPACKETSAVAILABLE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETTXQUEUE TxQueue
    );

_IRQL_requires_max_(HIGH_LEVEL)
VOID
FORCEINLINE
NetTxQueueNotifyMoreCompletedPacketsAvailable(
    _In_
    NETTXQUEUE TxQueue
    )
{
    ((PFN_NETTXQUEUENOTIFYMORECOMPLETEDPACKETSAVAILABLE) NetFunctions[NetTxQueueNotifyMoreCompletedPacketsAvailableTableIndex])(NetDriverGlobals, TxQueue);
}

//
// NET Function: NetTxQueueInitGetQueueId
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
ULONG
(*PFN_NETTXQUEUEINITGETQUEUEID)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    PNETTXQUEUE_INIT NetTxQueueInit
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
ULONG
FORCEINLINE
NetTxQueueInitGetQueueId(
    _In_
    PNETTXQUEUE_INIT NetTxQueueInit
    )
{
    return ((PFN_NETTXQUEUEINITGETQUEUEID) NetFunctions[NetTxQueueInitGetQueueIdTableIndex])(NetDriverGlobals, NetTxQueueInit);
}

//
// NET Function: NetTxQueueGetRingBuffer
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
PNET_RING_BUFFER
(*PFN_NETTXQUEUEGETRINGBUFFER)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETTXQUEUE NetTxQueue
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
PNET_RING_BUFFER
FORCEINLINE
NetTxQueueGetRingBuffer(
    _In_
    NETTXQUEUE NetTxQueue
    )
{
    return ((PFN_NETTXQUEUEGETRINGBUFFER) NetFunctions[NetTxQueueGetRingBufferTableIndex])(NetDriverGlobals, NetTxQueue);
}



WDF_EXTERN_C_END

#endif // _NETTXQUEUE_H_

