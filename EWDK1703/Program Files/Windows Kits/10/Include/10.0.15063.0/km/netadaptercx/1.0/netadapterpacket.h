/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    NetAdapterPacket.h

Abstract:

    Wrapper functions to access NET_PACKETs from a NET_RING_BUFFER

Environment:

    kernel mode only

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _NETADAPTERPACKET_H_
#define _NETADAPTERPACKET_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START




#define NET_PACKET_802_15_4_INFO(_netpacket) *(PVOID*)(NetPacketGet802_15_4Info((_netpacket)))
#define NET_PACKET_802_15_4_STATUS(_netpacket) *(NTSTATUS*)(NetPacketGet802_15_4Status((_netpacket)))

typedef PCWDF_OBJECT_CONTEXT_TYPE_INFO PCNET_CONTEXT_TYPE_INFO;

#define NET_PACKET_DECLARE_CASTING_FUNCTION(_contexttype, _castingfunction)     \
                                                                                \
WDF_EXTERN_C                                                                    \
__drv_aliasesMem                                                                \
WDF_TYPE_NAME_POINTER_TYPE(_contexttype)                                        \
FORCEINLINE                                                                     \
_castingfunction(                                                               \
   _In_ NET_PACKET* NetPacket                                                   \
   )                                                                            \
{                                                                               \
    return (WDF_TYPE_NAME_POINTER_TYPE(_contexttype))                           \
        NetPacketGetTypedContext(                                               \
            NetPacket,                                                          \
            WDF_GET_CONTEXT_TYPE_INFO(_contexttype)->UniqueType                 \
            );                                                                  \
}                                                                               \


#define NET_PACKET_DECLARE_CONTEXT_TYPE_WITH_NAME(_contexttype, _castingfunction)   \
                                                                                    \
WDF_DECLARE_TYPE_AND_GLOBALS(                                                       \
    _contexttype,                                                                   \
    WDF_GET_CONTEXT_TYPE_INFO(_contexttype),                                        \
    NULL,                                                                           \
    WDF_TYPE_DEFAULT_SECTION_NAME)                                                  \
                                                                                    \
NET_PACKET_DECLARE_CASTING_FUNCTION(_contexttype, _castingfunction)

__inline
NET_PACKET *
NetRingBufferGetPacketAtIndex(
    _In_ NET_RING_BUFFER *RingBuffer,
    _In_ UINT32 Index
    )
{
    return (NET_PACKET*)NetRingBufferGetElementAtIndex(RingBuffer, Index);
}

__inline
NET_PACKET *
NetRingBufferGetNextPacket(
    _In_ NET_RING_BUFFER *RingBuffer
    )
{
    UINT32 NextIndex = RingBuffer->NextIndex;

    if (NextIndex == RingBuffer->EndIndex)
        return NULL;

    return NetRingBufferGetPacketAtIndex(RingBuffer, NextIndex);
}

__inline
NET_PACKET *
NetRingBufferAdvanceNextPacket(
    _In_ NET_RING_BUFFER *RingBuffer
    )
{
    UINT32 NextIndex = RingBuffer->NextIndex;

    if (NextIndex == RingBuffer->EndIndex)
        return NULL;

    RingBuffer->NextIndex = NetRingBufferIncrementIndex(RingBuffer, NextIndex);

    return NetRingBufferGetPacketAtIndex(RingBuffer, NextIndex);
}

__inline
VOID
NetRingBufferReturnCompletedPacketsThroughIndex(
    _In_ NET_RING_BUFFER *RingBuffer,
    _In_ UINT32 EndIndex
    )
{
    UINT32 i;

    for (i = RingBuffer->BeginIndex; i != EndIndex; i = NetRingBufferIncrementIndex(RingBuffer, i))
    {
        NET_PACKET *packet = NetRingBufferGetPacketAtIndex(RingBuffer, i);
        NET_PACKET_FRAGMENT *fragment;
        BOOLEAN isFirstFragmentOfPacket = TRUE;

        for (fragment = &packet->Data; fragment; fragment = NET_PACKET_FRAGMENT_GET_NEXT(fragment))
        {
            if (isFirstFragmentOfPacket && !fragment->Completed)
            {
                RingBuffer->BeginIndex = i;
                return;
            }

            if (fragment->LastPacketOfChain)
                break;

            isFirstFragmentOfPacket = (BOOLEAN)fragment->LastFragmentOfFrame;
        }
    }

    RingBuffer->BeginIndex = i;
}

__inline
VOID
NetRingBufferReturnCompletedPackets(
    _In_ NET_RING_BUFFER *RingBuffer
    )
{
    NetRingBufferReturnCompletedPacketsThroughIndex(RingBuffer, RingBuffer->NextIndex);
}

//
// NET Function: NetPacketGetTypedContext
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
PVOID
(*PFN_NETPACKETGETTYPEDCONTEXT)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NET_PACKET* NetPacket,
    _In_
    PCNET_CONTEXT_TYPE_INFO TypeInfo
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
PVOID
FORCEINLINE
NetPacketGetTypedContext(
    _In_
    NET_PACKET* NetPacket,
    _In_
    PCNET_CONTEXT_TYPE_INFO TypeInfo
    )
{
    return ((PFN_NETPACKETGETTYPEDCONTEXT) NetFunctions[NetPacketGetTypedContextTableIndex])(NetDriverGlobals, NetPacket, TypeInfo);
}

//
// NET Function: NetPacketGet802_15_4Info
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
ULONG_PTR
(*PFN_NETPACKETGET802_15_4INFO)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NET_PACKET* NetPacket
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
ULONG_PTR
FORCEINLINE
NetPacketGet802_15_4Info(
    _In_
    NET_PACKET* NetPacket
    )
{
    return ((PFN_NETPACKETGET802_15_4INFO) NetFunctions[NetPacketGet802_15_4InfoTableIndex])(NetDriverGlobals, NetPacket);
}

//
// NET Function: NetPacketGet802_15_4Status
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
ULONG_PTR
(*PFN_NETPACKETGET802_15_4STATUS)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NET_PACKET* NetPacket
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
ULONG_PTR
FORCEINLINE
NetPacketGet802_15_4Status(
    _In_
    NET_PACKET* NetPacket
    )
{
    return ((PFN_NETPACKETGET802_15_4STATUS) NetFunctions[NetPacketGet802_15_4StatusTableIndex])(NetDriverGlobals, NetPacket);
}



WDF_EXTERN_C_END

#endif // _NETADAPTERPACKET_H_

