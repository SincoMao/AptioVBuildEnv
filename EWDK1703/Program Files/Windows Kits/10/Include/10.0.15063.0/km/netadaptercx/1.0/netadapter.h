/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    NetAdapter.h

Abstract:

    This is the interfaces for the NetAdapter

Environment:

    kernel mode only

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _NETADAPTER_H_
#define _NETADAPTER_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START


typedef enum _NET_PACKET_FILTER_TYPES_FLAGS {
    NET_PACKET_FILTER_TYPE_DIRECTED = NDIS_PACKET_TYPE_DIRECTED,
    NET_PACKET_FILTER_TYPE_MULTICAST = NDIS_PACKET_TYPE_MULTICAST,
    NET_PACKET_FILTER_TYPE_ALL_MULTICAST = NDIS_PACKET_TYPE_ALL_MULTICAST,
    NET_PACKET_FILTER_TYPE_BROADCAST = NDIS_PACKET_TYPE_BROADCAST,
    NET_PACKET_FILTER_TYPE_SOURCE_ROUTING = NDIS_PACKET_TYPE_SOURCE_ROUTING,
    NET_PACKET_FILTER_TYPE_PROMISCUOUS = NDIS_PACKET_TYPE_PROMISCUOUS,
    NET_PACKET_FILTER_TYPE_ALL_LOCAL = NDIS_PACKET_TYPE_ALL_LOCAL,
    NET_PACKET_FILTER_TYPE_MAC_FRAME = NDIS_PACKET_TYPE_MAC_FRAME,
    NET_PACKET_FILTER_TYPE_NO_LOCAL = NDIS_PACKET_TYPE_NO_LOCAL,
} NET_PACKET_FILTER_TYPES_FLAGS;

typedef enum _NET_ADAPTER_STATISTICS_FLAGS {
    NET_ADAPTER_STATISTICS_NO_FLAGS = 0,
    NET_ADAPTER_STATISTICS_XMIT_OK = NDIS_STATISTICS_XMIT_OK_SUPPORTED,
    NET_ADAPTER_STATISTICS_RCV_OK = NDIS_STATISTICS_RCV_OK_SUPPORTED,
    NET_ADAPTER_STATISTICS_XMIT_ERROR = NDIS_STATISTICS_XMIT_ERROR_SUPPORTED,
    NET_ADAPTER_STATISTICS_RCV_ERROR = NDIS_STATISTICS_RCV_ERROR_SUPPORTED,
    NET_ADAPTER_STATISTICS_RCV_NO_BUFFER = NDIS_STATISTICS_RCV_NO_BUFFER_SUPPORTED,
    NET_ADAPTER_STATISTICS_DIRECTED_BYTES_XMIT = NDIS_STATISTICS_DIRECTED_BYTES_XMIT_SUPPORTED,
    NET_ADAPTER_STATISTICS_DIRECTED_FRAMES_XMIT = NDIS_STATISTICS_DIRECTED_FRAMES_XMIT_SUPPORTED,
    NET_ADAPTER_STATISTICS_MULTICAST_BYTES_XMIT = NDIS_STATISTICS_MULTICAST_BYTES_XMIT_SUPPORTED,
    NET_ADAPTER_STATISTICS_MULTICAST_FRAMES_XMIT = NDIS_STATISTICS_MULTICAST_FRAMES_XMIT_SUPPORTED,
    NET_ADAPTER_STATISTICS_BROADCAST_BYTES_XMIT = NDIS_STATISTICS_BROADCAST_BYTES_XMIT_SUPPORTED,
    NET_ADAPTER_STATISTICS_BROADCAST_FRAMES_XMIT = NDIS_STATISTICS_BROADCAST_FRAMES_XMIT_SUPPORTED,
    NET_ADAPTER_STATISTICS_DIRECTED_BYTES_RCV = NDIS_STATISTICS_DIRECTED_BYTES_RCV_SUPPORTED,
    NET_ADAPTER_STATISTICS_DIRECTED_FRAMES_RCV = NDIS_STATISTICS_DIRECTED_FRAMES_RCV_SUPPORTED,
    NET_ADAPTER_STATISTICS_MULTICAST_BYTES_RCV = NDIS_STATISTICS_MULTICAST_BYTES_RCV_SUPPORTED,
    NET_ADAPTER_STATISTICS_MULTICAST_FRAMES_RCV = NDIS_STATISTICS_MULTICAST_FRAMES_RCV_SUPPORTED,
    NET_ADAPTER_STATISTICS_BROADCAST_BYTES_RCV = NDIS_STATISTICS_BROADCAST_BYTES_RCV_SUPPORTED,
    NET_ADAPTER_STATISTICS_BROADCAST_FRAMES_RCV = NDIS_STATISTICS_BROADCAST_FRAMES_RCV_SUPPORTED,
    NET_ADAPTER_STATISTICS_RCV_CRC_ERROR = NDIS_STATISTICS_RCV_CRC_ERROR_SUPPORTED,
    NET_ADAPTER_STATISTICS_TRANSMIT_QUEUE_LENGTH = NDIS_STATISTICS_TRANSMIT_QUEUE_LENGTH_SUPPORTED,
    NET_ADAPTER_STATISTICS_BYTES_RCV = NDIS_STATISTICS_BYTES_RCV_SUPPORTED,
    NET_ADAPTER_STATISTICS_BYTES_XMIT = NDIS_STATISTICS_BYTES_XMIT_SUPPORTED,
    NET_ADAPTER_STATISTICS_RCV_DISCARDS = NDIS_STATISTICS_RCV_DISCARDS_SUPPORTED,
    NET_ADAPTER_STATISTICS_GEN_STATISTICS = NDIS_STATISTICS_GEN_STATISTICS_SUPPORTED,
    NET_ADAPTER_STATISTICS_XMIT_DISCARDS = NDIS_STATISTICS_XMIT_DISCARDS_SUPPORTED,
} NET_ADAPTER_STATISTICS_FLAGS;

typedef enum _NET_ADAPTER_POWER_FLAGS {
    NET_ADAPTER_POWER_WAKE_PACKET_INDICATION = NDIS_PM_WAKE_PACKET_INDICATION_SUPPORTED,
    NET_ADAPTER_POWER_SELECTIVE_SUSPEND = NDIS_PM_SELECTIVE_SUSPEND_SUPPORTED,
} NET_ADAPTER_POWER_FLAGS;

typedef enum _NET_ADAPTER_WAKE_PATTERN_FLAGS {
    NET_ADAPTER_WAKE_BITMAP_PATTERN = NDIS_PM_WOL_BITMAP_PATTERN_ENABLED,
    NET_ADAPTER_WAKE_MAGIC_PACKET = NDIS_PM_WOL_MAGIC_PACKET_ENABLED,
    NET_ADAPTER_WAKE_IPV4_TCP_SYN = NDIS_PM_WOL_IPV4_TCP_SYN_ENABLED,
    NET_ADAPTER_WAKE_IPV6_TCP_SYN = NDIS_PM_WOL_IPV6_TCP_SYN_ENABLED,
    NET_ADAPTER_WAKE_IPV4_DEST_ADDR_WILDCARD = NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_ENABLED,
    NET_ADAPTER_WAKE_IPV6_DEST_ADDR_WILDCARD = NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_ENABLED,
    NET_ADAPTER_WAKE_EAPOL_REQUEST_ID_MESSAGE = NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_ENABLED,
} NET_ADAPTER_WAKE_PATTERN_FLAGS;

typedef enum _NET_ADAPTER_PROTOCOL_OFFLOADS_FLAGS {
    NET_ADAPTER_PROTOCOL_OFFLOAD_ARP = NDIS_PM_PROTOCOL_OFFLOAD_ARP_ENABLED,
    NET_ADAPTER_PROTOCOL_OFFLOAD_NS = NDIS_PM_PROTOCOL_OFFLOAD_NS_ENABLED,
    NET_ADAPTER_PROTOCOL_OFFLOAD_80211_RSN_REKEY = NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_ENABLED,
} NET_ADAPTER_PROTOCOL_OFFLOADS_FLAGS;

typedef enum _NET_ADAPTER_WAKEUP_EVENTS_FLAGS {
    NET_ADAPTER_WAKE_ON_MEDIA_CONNECT = NDIS_PM_WAKE_ON_MEDIA_CONNECT_SUPPORTED,
    NET_ADAPTER_WAKE_ON_MEDIA_DISCONNECT = NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_SUPPORTED,
} NET_ADAPTER_WAKEUP_EVENTS_FLAGS;

typedef enum _NET_ADAPTER_MEDIA_SPECIFIC_WAKEUP_EVENTS_FLAGS {
    NET_ADAPTER_WLAN_WAKE_ON_NLO_DISCOVERY = NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_SUPPORTED,
    NET_ADAPTER_WLAN_WAKE_ON_AP_ASSOCIATION_LOST = NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_SUPPORTED,
    NET_ADAPTER_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR = NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_SUPPORTED,
    NET_ADAPTER_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST = NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_SUPPORTED,
    NET_ADAPTER_WWAN_WAKE_ON_REGISTER_STATE = NDIS_WWAN_WAKE_ON_REGISTER_STATE_SUPPORTED,
    NET_ADAPTER_WWAN_WAKE_ON_SMS_RECEIVE = NDIS_WWAN_WAKE_ON_SMS_RECEIVE_SUPPORTED,
    NET_ADAPTER_WWAN_WAKE_ON_USSD_RECEIVE = NDIS_WWAN_WAKE_ON_USSD_RECEIVE_SUPPORTED,
    NET_ADAPTER_WWAN_WAKE_ON_PACKET_STATE = NDIS_WWAN_WAKE_ON_PACKET_STATE_SUPPORTED,
    NET_ADAPTER_WWAN_WAKE_ON_UICC_CHANGE = NDIS_WWAN_WAKE_ON_UICC_CHANGE_SUPPORTED,
} NET_ADAPTER_MEDIA_SPECIFIC_WAKEUP_EVENTS_FLAGS;

typedef enum _NET_ADAPTER_PAUSE_FUNCTIONS {
    NetAdapterPauseFunctionsUnsupported = NdisPauseFunctionsUnsupported,
    NetAdapterPauseFunctionsSendOnly = NdisPauseFunctionsSendOnly,
    NetAdapterPauseFunctionsReceiveOnly = NdisPauseFunctionsReceiveOnly,
    NetAdapterPauseFunctionsSendAndReceive = NdisPauseFunctionsSendAndReceive,
    NetAdapterPauseFunctionsUnknown = NdisPauseFunctionsUnknown,
} NET_ADAPTER_PAUSE_FUNCTIONS, *PNET_ADAPTER_PAUSE_FUNCTIONS;

typedef enum _NET_ADAPTER_AUTO_NEGOTIATION_FLAGS {
    NET_ADAPTER_AUTO_NEGOTIATION_NO_FLAGS = 0,
    NET_ADAPTER_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED = NDIS_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED,
    NET_ADAPTER_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED = NDIS_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED,
    NET_ADAPTER_LINK_STATE_DUPLEX_AUTO_NEGOTIATED = NDIS_LINK_STATE_DUPLEX_AUTO_NEGOTIATED,
    NET_ADAPTER_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED = NDIS_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED,
} NET_ADAPTER_AUTO_NEGOTIATION_FLAGS;



DEFINE_ENUM_FLAG_OPERATORS(NET_PACKET_FILTER_TYPES_FLAGS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_STATISTICS_FLAGS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_POWER_FLAGS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_WAKE_PATTERN_FLAGS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_PROTOCOL_OFFLOADS_FLAGS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_WAKEUP_EVENTS_FLAGS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_MEDIA_SPECIFIC_WAKEUP_EVENTS_FLAGS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_PAUSE_FUNCTIONS);
DEFINE_ENUM_FLAG_OPERATORS(NET_ADAPTER_AUTO_NEGOTIATION_FLAGS);

typedef
_Function_class_(EVT_NET_ADAPTER_CREATE_TXQUEUE)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
EVT_NET_ADAPTER_CREATE_TXQUEUE(
    _In_ 
    NETADAPTER Adapter,
    _Inout_
    PNETTXQUEUE_INIT TxQueueInit
    );

typedef EVT_NET_ADAPTER_CREATE_TXQUEUE *PFN_NET_ADAPTER_CREATE_TXQUEUE;

typedef
_Function_class_(EVT_NET_ADAPTER_CREATE_RXQUEUE)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
EVT_NET_ADAPTER_CREATE_RXQUEUE(
    _In_ 
    NETADAPTER Adapter,
    _Inout_
    PNETRXQUEUE_INIT RxQueueInit
    );

typedef EVT_NET_ADAPTER_CREATE_RXQUEUE *PFN_NET_ADAPTER_CREATE_RXQUEUE;

typedef
_Function_class_(EVT_NET_ADAPTER_SET_CAPABILITIES)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
EVT_NET_ADAPTER_SET_CAPABILITIES(
    _In_ 
    NETADAPTER                     Adapter
    );

typedef EVT_NET_ADAPTER_SET_CAPABILITIES *PFN_NET_ADAPTER_SET_CAPABILITIES;

typedef struct _NET_ADAPTER_PHYSICAL_ADDRESS {
    USHORT Length;
    UCHAR  PermanentAddress[NDIS_MAX_PHYS_ADDRESS_LENGTH];
    UCHAR  CurrentAddress[NDIS_MAX_PHYS_ADDRESS_LENGTH];
} NET_ADAPTER_PHYSICAL_ADDRESS, *PNET_ADAPTER_PHYSICAL_ADDRESS;

FORCEINLINE
VOID
NET_ADAPTER_PHYSICAL_ADDRESS_INIT(
    _Out_                                      PNET_ADAPTER_PHYSICAL_ADDRESS PhysicalAddress,
    _In_range_(1,NDIS_MAX_PHYS_ADDRESS_LENGTH) USHORT                        Length,
    _In_reads_bytes_(Length)                   PCUCHAR                       PermanentAddressBuffer,
    _In_reads_bytes_(Length)                   PCUCHAR                       CurrentAddressBuffer
    )
{
    RtlZeroMemory(PhysicalAddress, sizeof(NET_ADAPTER_PHYSICAL_ADDRESS));
    NT_ASSERTMSG("Failed: 0 < Length <= NDIS_MAX_PHYS_ADDRESS_LENGTH", 
                 (Length != 0) && (Length <= NDIS_MAX_PHYS_ADDRESS_LENGTH));
    PhysicalAddress->Length = Length;
    
    RtlCopyMemory(PhysicalAddress->PermanentAddress, 
                  PermanentAddressBuffer, 
                  min(Length, NDIS_MAX_PHYS_ADDRESS_LENGTH)); 

    RtlCopyMemory(PhysicalAddress->CurrentAddress, 
                  CurrentAddressBuffer, 
                  min(Length, NDIS_MAX_PHYS_ADDRESS_LENGTH)); 
}

typedef struct _NET_ADAPTER_LINK_LAYER_CAPABILITIES {
    //
    // Size of structure. 
    //
    ULONG                           Size;
    NET_PACKET_FILTER_TYPES_FLAGS   SupportedPacketFilters;
    ULONG                           MaxMulticastListSize;
    NET_ADAPTER_PHYSICAL_ADDRESS    PhysicalAddress;
    NET_ADAPTER_STATISTICS_FLAGS    SupportedStatistics;
    ULONG64                         MaxTxLinkSpeed;    
    ULONG64                         MaxRxLinkSpeed;
} NET_ADAPTER_LINK_LAYER_CAPABILITIES, *PNET_ADAPTER_LINK_LAYER_CAPABILITIES;

FORCEINLINE
VOID
NET_ADAPTER_LINK_LAYER_CAPABILITIES_INIT_NO_PHYSICAL_ADDRESS(
    _Out_ PNET_ADAPTER_LINK_LAYER_CAPABILITIES  LinkLayerCapabilities,
    _In_  NET_PACKET_FILTER_TYPES_FLAGS  SupportedPacketFilters,
    _In_  ULONG                          MaxMulticastListSize,
    _In_  NET_ADAPTER_STATISTICS_FLAGS   SupportedStatistics,
    _In_  ULONG64                        MaxTxLinkSpeed,
    _In_  ULONG64                        MaxRxLinkSpeed
    ) 
{
    RtlZeroMemory(LinkLayerCapabilities, sizeof(NET_ADAPTER_LINK_LAYER_CAPABILITIES));
    LinkLayerCapabilities->Size = sizeof(NET_ADAPTER_LINK_LAYER_CAPABILITIES);
    LinkLayerCapabilities->SupportedPacketFilters = SupportedPacketFilters;
    LinkLayerCapabilities->MaxMulticastListSize = MaxMulticastListSize;
    LinkLayerCapabilities->SupportedStatistics = SupportedStatistics;
    LinkLayerCapabilities->MaxTxLinkSpeed = MaxTxLinkSpeed;
    LinkLayerCapabilities->MaxRxLinkSpeed = MaxRxLinkSpeed;
}

FORCEINLINE
VOID
NET_ADAPTER_LINK_LAYER_CAPABILITIES_INIT(
    _Out_ PNET_ADAPTER_LINK_LAYER_CAPABILITIES  LinkLayerCapabilities,
    _In_  NET_PACKET_FILTER_TYPES_FLAGS         SupportedPacketFilters,
    _In_  ULONG                                 MaxMulticastListSize,
    _In_  NET_ADAPTER_STATISTICS_FLAGS          SupportedStatistics,
    _In_  ULONG64                               MaxTxLinkSpeed,
    _In_  ULONG64                               MaxRxLinkSpeed,
    _In_range_(1,NDIS_MAX_PHYS_ADDRESS_LENGTH)
          USHORT                                PhysicalAddressLength,
    _In_reads_bytes_(PhysicalAddressLength) 
          PUCHAR                                PermanentPhysicalAddress,
    _In_reads_bytes_(PhysicalAddressLength) 
          PUCHAR                                CurrentPhysicalAddress
    ) 
{
    RtlZeroMemory(LinkLayerCapabilities, sizeof(NET_ADAPTER_LINK_LAYER_CAPABILITIES));
    LinkLayerCapabilities->Size = sizeof(NET_ADAPTER_LINK_LAYER_CAPABILITIES);
    LinkLayerCapabilities->SupportedPacketFilters = SupportedPacketFilters;
    LinkLayerCapabilities->MaxMulticastListSize = MaxMulticastListSize;
    LinkLayerCapabilities->SupportedStatistics = SupportedStatistics;
    LinkLayerCapabilities->MaxTxLinkSpeed = MaxTxLinkSpeed;
    LinkLayerCapabilities->MaxRxLinkSpeed = MaxRxLinkSpeed;
    NET_ADAPTER_PHYSICAL_ADDRESS_INIT(&LinkLayerCapabilities->PhysicalAddress, 
                                       PhysicalAddressLength, 
                                       PermanentPhysicalAddress,
                                       CurrentPhysicalAddress);
}

typedef
_Function_class_(EVT_NET_ADAPTER_PREVIEW_WAKE_PATTERN)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
EVT_NET_ADAPTER_PREVIEW_WAKE_PATTERN(
    _In_ 
    NETADAPTER                      Adapter,
    _In_ 
    NETPOWERSETTINGS                ExistingPowerSettings,
    _In_ 
    NDIS_PM_WOL_PACKET              WakePatternType,
    _In_ 
    PNDIS_PM_WOL_PATTERN            PatternToBeAdded
    );

typedef EVT_NET_ADAPTER_PREVIEW_WAKE_PATTERN *PFN_NET_ADAPTER_PREVIEW_WAKE_PATTERN;

typedef
_Function_class_(EVT_NET_ADAPTER_PREVIEW_PROTOCOL_OFFLOAD)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
EVT_NET_ADAPTER_PREVIEW_PROTOCOL_OFFLOAD(
    _In_ 
    NETADAPTER                          Adapter,
    _In_ 
    NETPOWERSETTINGS                    ExistingPowerSettings,
    _In_ 
    NDIS_PM_PROTOCOL_OFFLOAD_TYPE       ProtocolOffloadType,
    _In_ 
    PNDIS_PM_PROTOCOL_OFFLOAD           ProtocolOffloadToBeAdded
    );

typedef EVT_NET_ADAPTER_PREVIEW_PROTOCOL_OFFLOAD *PFN_NET_ADAPTER_PREVIEW_PROTOCOL_OFFLOAD;

typedef struct _NET_ADAPTER_POWER_CAPABILITIES {
    //
    // Size of structure. 
    //
    ULONG Size;
    NET_ADAPTER_POWER_FLAGS                        Flags;
    NET_ADAPTER_WAKE_PATTERN_FLAGS                 SupportedWakePatterns;
    ULONG                                          NumTotalWakePatterns;
    ULONG                                          MaxWakePatternSize;
    ULONG                                          MaxWakePatternOffset;
    ULONG                                          MaxWakePacketSaveBuffer;
    NET_ADAPTER_PROTOCOL_OFFLOADS_FLAGS            SupportedProtocolOffloads;
    ULONG                                          NumArpOffloadIPv4Addresses;
    ULONG                                          NumNSOffloadIPv6Addresses;
    NET_ADAPTER_WAKEUP_EVENTS_FLAGS                SupportedWakeUpEvents;
    NET_ADAPTER_MEDIA_SPECIFIC_WAKEUP_EVENTS_FLAGS SupportedMediaSpecificWakeUpEvents;
    PFN_NET_ADAPTER_PREVIEW_WAKE_PATTERN           EvtAdapterPreviewWakePattern;
    PFN_NET_ADAPTER_PREVIEW_PROTOCOL_OFFLOAD       EvtAdapterPreviewProtocolOffload;
    WDF_TRI_STATE                                  ManageS0IdlePowerReferences;
} NET_ADAPTER_POWER_CAPABILITIES, *PNET_ADAPTER_POWER_CAPABILITIES;

FORCEINLINE
VOID
NET_ADAPTER_POWER_CAPABILITIES_INIT(
    _Out_ PNET_ADAPTER_POWER_CAPABILITIES                PowerCapabilities
    )
{
    RtlZeroMemory(PowerCapabilities, sizeof(NET_ADAPTER_POWER_CAPABILITIES));
    PowerCapabilities->Size = sizeof(NET_ADAPTER_POWER_CAPABILITIES);
    PowerCapabilities->ManageS0IdlePowerReferences = WdfUseDefault;
}


typedef struct _NET_ADAPTER_DATAPATH_CAPABILITIES {
    //
    // Size of structure. 
    //
    ULONG Size;

    ULONG NumTxQueues;
    ULONG NumRxQueues;

} NET_ADAPTER_DATAPATH_CAPABILITIES, *PNET_ADAPTER_DATAPATH_CAPABILITIES;

FORCEINLINE
VOID
NET_ADAPTER_DATAPATH_CAPABILITIES_INIT(
    _Out_ PNET_ADAPTER_DATAPATH_CAPABILITIES DataPathCapabilities
    )
{
    RtlZeroMemory(DataPathCapabilities, sizeof(NET_ADAPTER_DATAPATH_CAPABILITIES));
    DataPathCapabilities->Size = sizeof(NET_ADAPTER_DATAPATH_CAPABILITIES);
}

typedef struct _NET_ADAPTER_LINK_STATE {
    //
    // Size of structure. 
    //
    ULONG                                Size;

    //
    // The Tranmit and Recieve Link Speeds of the adapter
    // in bits per second.
    //
    ULONG64                              TxLinkSpeed;
    ULONG64                              RxLinkSpeed;

    //
    // Media Connect state of the adapter
    //
    NET_IF_MEDIA_CONNECT_STATE           MediaConnectState;

    //
    // Media duplex state of the adapter
    //
    NET_IF_MEDIA_DUPLEX_STATE            MediaDuplexState;

    //
    // Supported pause functions by the adapter
    //
    NET_ADAPTER_PAUSE_FUNCTIONS          SupportedPauseFunctions;

    //
    // Flags representing the auto-negotiation settings of the adapter
    //
    NET_ADAPTER_AUTO_NEGOTIATION_FLAGS   AutoNegotiationFlags;

} NET_ADAPTER_LINK_STATE, *PNET_ADAPTER_LINK_STATE;

FORCEINLINE
VOID
NET_ADAPTER_LINK_STATE_INIT(
    _Out_ PNET_ADAPTER_LINK_STATE              LinkState, 
    _In_  ULONG64                              LinkSpeed,
    _In_  NET_IF_MEDIA_CONNECT_STATE           MediaConnectState,
    _In_  NET_IF_MEDIA_DUPLEX_STATE            MediaDuplexState,
    _In_  NET_ADAPTER_PAUSE_FUNCTIONS          SupportedPauseFunctions,
    _In_  NET_ADAPTER_AUTO_NEGOTIATION_FLAGS   AutoNegotiationFlags
    )
{
    RtlZeroMemory(LinkState, sizeof(NET_ADAPTER_LINK_STATE));
    LinkState->Size = sizeof(NET_ADAPTER_LINK_STATE);
    LinkState->TxLinkSpeed = LinkSpeed;
    LinkState->RxLinkSpeed = LinkSpeed;
    LinkState->MediaConnectState = MediaConnectState;
    LinkState->MediaDuplexState = MediaDuplexState;
    LinkState->SupportedPauseFunctions = SupportedPauseFunctions;
    LinkState->AutoNegotiationFlags = AutoNegotiationFlags;
}

FORCEINLINE
VOID
NET_ADAPTER_LINK_STATE_INIT_DISCONNECTED(
    _Out_ PNET_ADAPTER_LINK_STATE              LinkState
    )
{
    RtlZeroMemory(LinkState, sizeof(NET_ADAPTER_LINK_STATE));
    LinkState->Size = sizeof(NET_ADAPTER_LINK_STATE);

    LinkState->MediaConnectState = MediaConnectStateDisconnected;

    LinkState->TxLinkSpeed = NDIS_LINK_SPEED_UNKNOWN;
    LinkState->RxLinkSpeed = NDIS_LINK_SPEED_UNKNOWN;
    LinkState->MediaDuplexState = MediaDuplexStateUnknown;
    LinkState->SupportedPauseFunctions = NetAdapterPauseFunctionsUnknown;
    LinkState->AutoNegotiationFlags = NET_ADAPTER_AUTO_NEGOTIATION_NO_FLAGS;
}

typedef enum _NET_ADAPTER_CONFIG_RESERVED_FLAGS NET_ADAPTER_CONFIG_RESERVED_FLAGS;

typedef struct _NET_ADAPTER_CONFIG {
    //
    // Size of structure. 
    //
    ULONG                                     Size;

    NET_ADAPTER_DRIVER_TYPE                   Type;

    PFN_NET_ADAPTER_SET_CAPABILITIES          EvtAdapterSetCapabilities;

    //
    // Data/control path state change events 
    //
    PFN_NET_ADAPTER_CREATE_TXQUEUE            EvtAdapterCreateTxQueue;
    PFN_NET_ADAPTER_CREATE_RXQUEUE            EvtAdapterCreateRxQueue;

    //
    // PWDF_OBJECT_ATTRIBUTES for Oids
    //
    PWDF_OBJECT_ATTRIBUTES                    NetRequestObjectAttributes;
    
    //
    // PWDF_OBJECT_ATTRIBUTES for NETPOWERSETTINGS object
    //
    PWDF_OBJECT_ATTRIBUTES                    NetPowerSettingsObjectAttributes;    
} NET_ADAPTER_CONFIG, *PNET_ADAPTER_CONFIG;

FORCEINLINE
VOID
NET_ADAPTER_CONFIG_INIT(
    _Out_ PNET_ADAPTER_CONFIG                     AdapterConfig,
    _In_  PFN_NET_ADAPTER_SET_CAPABILITIES        EvtAdapterSetCapabilities,
    _In_  PFN_NET_ADAPTER_CREATE_TXQUEUE          EvtAdapterCreateTxQueue,
    _In_  PFN_NET_ADAPTER_CREATE_RXQUEUE          EvtAdapterCreateRxQueue
    )
{    
    RtlZeroMemory(AdapterConfig,
                  sizeof(NET_ADAPTER_CONFIG));
    AdapterConfig->Size = sizeof(NET_ADAPTER_CONFIG);
    AdapterConfig->EvtAdapterSetCapabilities = EvtAdapterSetCapabilities;
    AdapterConfig->EvtAdapterCreateTxQueue = EvtAdapterCreateTxQueue;
    AdapterConfig->EvtAdapterCreateRxQueue = EvtAdapterCreateRxQueue;
    AdapterConfig->Type = NET_ADAPTER_DRIVER_TYPE_MINIPORT;
}

//
// NET Function: NetAdapterDeviceInitConfig
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(*PFN_NETADAPTERDEVICEINITCONFIG)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _Inout_
    PWDFDEVICE_INIT DeviceInit
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
FORCEINLINE
NetAdapterDeviceInitConfig(
    _Inout_
    PWDFDEVICE_INIT DeviceInit
    )
{
    return ((PFN_NETADAPTERDEVICEINITCONFIG) NetFunctions[NetAdapterDeviceInitConfigTableIndex])(NetDriverGlobals, DeviceInit);
}

//
// NET Function: NetAdapterCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(*PFN_NETADAPTERCREATE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES AdapterAttributes,
    _In_
    PNET_ADAPTER_CONFIG Configuration,
    _Out_
    NETADAPTER* Adapter
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
FORCEINLINE
NetAdapterCreate(
    _In_
    WDFDEVICE Device,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES AdapterAttributes,
    _In_
    PNET_ADAPTER_CONFIG Configuration,
    _Out_
    NETADAPTER* Adapter
    )
{
    return ((PFN_NETADAPTERCREATE) NetFunctions[NetAdapterCreateTableIndex])(NetDriverGlobals, Device, AdapterAttributes, Configuration, Adapter);
}

//
// NET Function: NetAdapterSetLinkLayerCapabilities
//
typedef
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
VOID
(*PFN_NETADAPTERSETLINKLAYERCAPABILITIES)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_LINK_LAYER_CAPABILITIES LinkLayerCapabilities
    );

_IRQL_requires_(PASSIVE_LEVEL)
VOID
FORCEINLINE
NetAdapterSetLinkLayerCapabilities(
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_LINK_LAYER_CAPABILITIES LinkLayerCapabilities
    )
{
    ((PFN_NETADAPTERSETLINKLAYERCAPABILITIES) NetFunctions[NetAdapterSetLinkLayerCapabilitiesTableIndex])(NetDriverGlobals, Adapter, LinkLayerCapabilities);
}

//
// NET Function: NetAdapterSetLinkLayerMtuSize
//
typedef
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
VOID
(*PFN_NETADAPTERSETLINKLAYERMTUSIZE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_
    ULONG MtuSize
    );

_IRQL_requires_(PASSIVE_LEVEL)
VOID
FORCEINLINE
NetAdapterSetLinkLayerMtuSize(
    _In_
    NETADAPTER Adapter,
    _In_
    ULONG MtuSize
    )
{
    ((PFN_NETADAPTERSETLINKLAYERMTUSIZE) NetFunctions[NetAdapterSetLinkLayerMtuSizeTableIndex])(NetDriverGlobals, Adapter, MtuSize);
}

//
// NET Function: NetAdapterSetPowerCapabilities
//
typedef
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
VOID
(*PFN_NETADAPTERSETPOWERCAPABILITIES)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_POWER_CAPABILITIES PowerCapabilities
    );

_IRQL_requires_(PASSIVE_LEVEL)
VOID
FORCEINLINE
NetAdapterSetPowerCapabilities(
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_POWER_CAPABILITIES PowerCapabilities
    )
{
    ((PFN_NETADAPTERSETPOWERCAPABILITIES) NetFunctions[NetAdapterSetPowerCapabilitiesTableIndex])(NetDriverGlobals, Adapter, PowerCapabilities);
}

//
// NET Function: NetAdapterSetDataPathCapabilities
//
typedef
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
VOID
(*PFN_NETADAPTERSETDATAPATHCAPABILITIES)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_DATAPATH_CAPABILITIES DataPathCapabilities
    );

_IRQL_requires_(PASSIVE_LEVEL)
VOID
FORCEINLINE
NetAdapterSetDataPathCapabilities(
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_DATAPATH_CAPABILITIES DataPathCapabilities
    )
{
    ((PFN_NETADAPTERSETDATAPATHCAPABILITIES) NetFunctions[NetAdapterSetDataPathCapabilitiesTableIndex])(NetDriverGlobals, Adapter, DataPathCapabilities);
}

//
// NET Function: NetAdapterSetCurrentLinkState
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
VOID
(*PFN_NETADAPTERSETCURRENTLINKSTATE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_LINK_STATE CurrentLinkState
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
VOID
FORCEINLINE
NetAdapterSetCurrentLinkState(
    _In_
    NETADAPTER Adapter,
    _In_
    PNET_ADAPTER_LINK_STATE CurrentLinkState
    )
{
    ((PFN_NETADAPTERSETCURRENTLINKSTATE) NetFunctions[NetAdapterSetCurrentLinkStateTableIndex])(NetDriverGlobals, Adapter, CurrentLinkState);
}

//
// NET Function: NetAdapterWdmGetNdisHandle
//
typedef
WDFAPI
NDIS_HANDLE
(*PFN_NETADAPTERWDMGETNDISHANDLE)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter
    );

NDIS_HANDLE
FORCEINLINE
NetAdapterWdmGetNdisHandle(
    _In_
    NETADAPTER Adapter
    )
{
    return ((PFN_NETADAPTERWDMGETNDISHANDLE) NetFunctions[NetAdapterWdmGetNdisHandleTableIndex])(NetDriverGlobals, Adapter);
}

//
// NET Function: NetAdapterGetNetLuid
//
typedef
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
NET_LUID
(*PFN_NETADAPTERGETNETLUID)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter
    );

_IRQL_requires_(PASSIVE_LEVEL)
NET_LUID
FORCEINLINE
NetAdapterGetNetLuid(
    _In_
    NETADAPTER Adapter
    )
{
    return ((PFN_NETADAPTERGETNETLUID) NetFunctions[NetAdapterGetNetLuidTableIndex])(NetDriverGlobals, Adapter);
}

//
// NET Function: NetAdapterOpenConfiguration
//
typedef
_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(*PFN_NETADAPTEROPENCONFIGURATION)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES ConfigurationAttributes,
    _Out_
    NETCONFIGURATION* Configuration
    );

_Must_inspect_result_
_IRQL_requires_(PASSIVE_LEVEL)
NTSTATUS
FORCEINLINE
NetAdapterOpenConfiguration(
    _In_
    NETADAPTER Adapter,
    _In_opt_
    PWDF_OBJECT_ATTRIBUTES ConfigurationAttributes,
    _Out_
    NETCONFIGURATION* Configuration
    )
{
    return ((PFN_NETADAPTEROPENCONFIGURATION) NetFunctions[NetAdapterOpenConfigurationTableIndex])(NetDriverGlobals, Adapter, ConfigurationAttributes, Configuration);
}

//
// NET Function: NetAdapterGetPowerSettings
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
NETPOWERSETTINGS
(*PFN_NETADAPTERGETPOWERSETTINGS)(
    _In_
    PNET_DRIVER_GLOBALS DriverGlobals,
    _In_
    NETADAPTER Adapter
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
NETPOWERSETTINGS
FORCEINLINE
NetAdapterGetPowerSettings(
    _In_
    NETADAPTER Adapter
    )
{
    return ((PFN_NETADAPTERGETPOWERSETTINGS) NetFunctions[NetAdapterGetPowerSettingsTableIndex])(NetDriverGlobals, Adapter);
}



WDF_EXTERN_C_END

#endif // _NETADAPTER_H_

