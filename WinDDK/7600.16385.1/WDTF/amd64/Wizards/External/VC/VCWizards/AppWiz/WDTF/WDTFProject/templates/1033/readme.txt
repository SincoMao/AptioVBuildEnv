========================================================================
    WDTF Plugin using ATL : [!output PROJECT_NAME] Project Overview
========================================================================

[!if DLL_APP]
AppWizard has created this [!output PROJECT_NAME] project for you to use as the starting point for
writing your Dynamic Link Library (DLL).
[!endif]
[!if EXE_APP]
AppWizard has created this [!output PROJECT_NAME] project for you to use as the starting point for
writing your Executable (EXE).
[!endif]
[!if SERVICE_APP]
AppWizard has created this [!output PROJECT_NAME] project for you to use as the starting point for
writing your Service (EXE).
[!endif]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!TODO: Your next step is to implement an actual object by clicking the 
!      "Project->Add Class..." menu item and following the WDTF Implementation
!      Wizard to completion. Once this is done, search the project for "TODO"
!      and complete the necessary steps.
!      If you have already done this, please remove this comment.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[!if ATTRIBUTED]
This project is implemented with Visual C++ attributes.
[!endif]

This file contains a summary of what you will find in each of the files that
make up your project.

[!output PROJECT_NAME].vcproj
    This is the main project file for VC++ projects generated using an Application Wizard. 
    It contains information about the version of Visual C++ that generated the file, and 
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

[!if ATTRIBUTED]
_[!output SAFE_IDL_NAME].idl
    This file will be generated by the compiler when the project is built. It will contain the IDL 
    definitions of the type library, the interfaces and co-classes defined in your project.
    This file will be processed by the MIDL compiler to generate:
        C++ interface definitions and GUID declarations (_[!output SAFE_IDL_NAME].h)
        GUID definitions                                (_[!output SAFE_IDL_NAME]_i.c)
        A type library                                  (_[!output SAFE_IDL_NAME].tlb)
        Marshaling code                                 (_[!output SAFE_IDL_NAME]_p.c and dlldata.c)
[!else]
[!output SAFE_IDL_NAME].idl
    This file contains the IDL definitions of the type library, the interfaces
    and co-classes defined in your project.
    This file will be processed by the MIDL compiler to generate:
        C++ interface definitions and GUID declarations ([!output SAFE_IDL_NAME].h)
        GUID definitions                                ([!output SAFE_IDL_NAME]_i.c)
        A type library                                  ([!output SAFE_IDL_NAME].tlb)
        Marshaling code                                 ([!output SAFE_IDL_NAME]_p.c and dlldata.c)

[!output SAFE_IDL_NAME].h
    This file contains the C++ interface definitions and GUID declarations of the
    items defined in [!output SAFE_IDL_NAME].idl. It will be regenerated by MIDL during compilation.
[!endif]

[!output PROJECT_NAME].cpp
[!if DLL_APP]
    This file contains the object map and the implementation of your DLL's exports.
[!endif]
[!if EXE_APP]
    This file contains the object map and the implementation of WinMain.
[!endif]
[!if SERVICE_APP]
    This file contains the object map and the implementation of WinMain, ServiceMain, and
    the service management functions.
[!endif]

[!output PROJECT_NAME].rc
    This is a listing of all of the Microsoft Windows resources that the
    program uses.

[!if DLL_APP]
[!output PROJECT_NAME].def
    This module-definition file provides the linker with information about the exports
    required by your DLL. It contains exports for:
        DllGetClassObject  
        DllCanUnloadNow    
        GetProxyDllInfo    
        DllRegisterServer	
        DllUnregisterServer
[!endif]

[!if !MERGE_PROXY_STUB]
/////////////////////////////////////////////////////////////////////////////
Proxy/stub DLL project and module definition file:

[!output PROJECT_NAME]ps.vcproj
    This file is the project file for building a proxy/stub DLL if necessary.
	The IDL file in the main project must contain at least one interface and you must 
	first compile the IDL file before building the proxy/stub DLL.	This process generates
	dlldata.c, [!output SAFE_IDL_NAME]_i.c and [!output SAFE_IDL_NAME]_p.c which are required
	to build the proxy/stub DLL.

[!output PROJECT_NAME]ps.def
    This module definition file provides the linker with information about the exports
    required by the proxy/stub.
[!endif]

/////////////////////////////////////////////////////////////////////////////
WDTF standard headers:

WDTF*.h/idl
    These files are all required in order to implement WDTF-compatible plugins.
    They define the interfaces and GUIDs used to communicate with the framework
    and consumers of the framework.

[!if SUPPORT_TRACING]
/////////////////////////////////////////////////////////////////////////////
WDTF Custom WPP Tracing infrastructure:
    These files will be useful only if you add a WDTF coclass using the 
    "Project->Add Class..." menu item and following one of the WDTF wizards.
    You should not need to modify these files. The WDTF team may release newer
    versions of these files at a later date.
    
WppDefs.h
    This file defines all of the possible trace macros that can be used in
    you project. Trace macros can be made to do the actual trace as well as
    anything a normal C/C++ macro can do.

COMTracing.h
    This file defines an implementation for the WDTF interface that supports
    tracing on a per-object basis.
    
CustomWpp.ini
    This file defines some custom tracing data types.
    
Tracing.h
    This file defines some internal classes/methods to support WDTF's usage of WPP.
    
VSTraceWpp.js
    This script is used in a Pre-Build Event to call the trace macro pre-processor.

[!endif]
/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named [!output PROJECT_NAME].pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file that defines resource IDs.

[!if SUPPORT_COMPLUS || SUPPORT_MFC]
/////////////////////////////////////////////////////////////////////////////
Other notes:

[!if SUPPORT_COMPLUS]
	The COM+ 1.0 Support option builds the COM+ 1.0 library into your skeleton application,
	making COM+ 1.0 classes, objects, and functions available to you.
[!endif]

[!if SUPPORT_MFC]
	The MFC Support option builds the Microsoft Foundation Class libraries into your skeleton application,
	making MFC classes, objects and functions available to you.
[!endif]
[!endif]
/////////////////////////////////////////////////////////////////////////////
