HKCR
{
    [!output PROGID] = s '[!output TYPE_NAME]'
    {
        CLSID = s '{[!output CLSID_REGISTRY_FORMAT]}'
    }
    [!output VERSION_INDEPENDENT_PROGID] = s '[!output TYPE_NAME]'
    {
        CLSID = s '{[!output CLSID_REGISTRY_FORMAT]}'
        CurVer = s '[!output PROGID]'
    }
    NoRemove WDTFActions
    {
        NoRemove Device
        {
            NoRemove SimpleIO
            {
                [!output COCLASS] = s '[!output TYPE_NAME]'
                {
                    val Match = s 'SymbolicLink AND ClassGUID="TODO: Enter your classGUID here, or use other WDTF metadata to define what kind of targets your SimpleIO functions on. Also, you may or may not require the SymbolicLink."'
                    
                    val TraceLevel = d '2'
            
                    CLSID = s '{[!output CLSID_REGISTRY_FORMAT]}'
                    CurVer = s '[!output PROGID]'
                }
            }
        }
    }
    NoRemove CLSID
    {
        ForceRemove {[!output CLSID_REGISTRY_FORMAT]} = s '[!output TYPE_NAME]'
        {
            ProgID = s '[!output PROGID]'
            VersionIndependentProgID = s '[!output VERSION_INDEPENDENT_PROGID]'
            ForceRemove 'Programmable'
[!if DLL_APP]
            InprocServer32 = s '%MODULE%'
            {
[!if !DEVICE || SUPPORT_DCOM]
[!if THREADING_FREE]
                val ThreadingModel = s 'Free'
[!endif]
[!if THREADING_BOTH]
                val ThreadingModel = s 'Both'
[!endif]
[!if THREADING_APARTMENT]
                val ThreadingModel = s 'Apartment'
[!endif]
[!if THREADING_NEUTRAL]
                val ThreadingModel = s 'Neutral'
[!endif]
[!else]
                val ThreadingModel = s 'Free'
[!endif]
            }
[!else]
            LocalServer32 = s '%MODULE%'
[!endif]
[!if APPID_EXIST]
            val AppID = s '[!output APPID_REGISTRY_FORMAT]'
[!endif]
            'TypeLib' = s '{[!output LIBID_REGISTRY_FORMAT]}'
        }
    }
}
